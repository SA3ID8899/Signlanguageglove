
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cf0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a2  00800060  00002cf0  00002d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e78  00000000  00000000  00002f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001324  00000000  00000000  00004d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <main>
      7a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_read>:
 */
#include"DIO.h"


uint8 DIO_read(Channel_Type channel)
{
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	00 d0       	rcall	.+0      	; 0x88 <DIO_read+0x6>
      88:	0f 92       	push	r0
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
      8e:	8b 83       	std	Y+3, r24	; 0x03
	int x=0;
      90:	1a 82       	std	Y+2, r1	; 0x02
      92:	19 82       	std	Y+1, r1	; 0x01

	if(channel>=0 && channel<=7)
      94:	8b 81       	ldd	r24, Y+3	; 0x03
      96:	88 30       	cpi	r24, 0x08	; 8
      98:	a0 f4       	brcc	.+40     	; 0xc2 <DIO_read+0x40>
		{
			x=GET_BIT(PINA,channel);
      9a:	e9 e3       	ldi	r30, 0x39	; 57
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 81       	ld	r24, Z
      a0:	28 2f       	mov	r18, r24
      a2:	30 e0       	ldi	r19, 0x00	; 0
      a4:	8b 81       	ldd	r24, Y+3	; 0x03
      a6:	88 2f       	mov	r24, r24
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	a9 01       	movw	r20, r18
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_read+0x30>
      ae:	55 95       	asr	r21
      b0:	47 95       	ror	r20
      b2:	8a 95       	dec	r24
      b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_read+0x2c>
      b6:	ca 01       	movw	r24, r20
      b8:	81 70       	andi	r24, 0x01	; 1
      ba:	90 70       	andi	r25, 0x00	; 0
      bc:	9a 83       	std	Y+2, r25	; 0x02
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	50 c0       	rjmp	.+160    	; 0x162 <DIO_read+0xe0>
		}
	else if(channel>=8 && channel<=15)
      c2:	8b 81       	ldd	r24, Y+3	; 0x03
      c4:	88 30       	cpi	r24, 0x08	; 8
      c6:	c0 f0       	brcs	.+48     	; 0xf8 <DIO_read+0x76>
      c8:	8b 81       	ldd	r24, Y+3	; 0x03
      ca:	80 31       	cpi	r24, 0x10	; 16
      cc:	a8 f4       	brcc	.+42     	; 0xf8 <DIO_read+0x76>
		{
	     	 x=GET_BIT(PINB,(channel-8));
      ce:	e6 e3       	ldi	r30, 0x36	; 54
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	28 2f       	mov	r18, r24
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	8b 81       	ldd	r24, Y+3	; 0x03
      da:	88 2f       	mov	r24, r24
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	08 97       	sbiw	r24, 0x08	; 8
      e0:	a9 01       	movw	r20, r18
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_read+0x66>
      e4:	55 95       	asr	r21
      e6:	47 95       	ror	r20
      e8:	8a 95       	dec	r24
      ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_read+0x62>
      ec:	ca 01       	movw	r24, r20
      ee:	81 70       	andi	r24, 0x01	; 1
      f0:	90 70       	andi	r25, 0x00	; 0
      f2:	9a 83       	std	Y+2, r25	; 0x02
      f4:	89 83       	std	Y+1, r24	; 0x01
      f6:	35 c0       	rjmp	.+106    	; 0x162 <DIO_read+0xe0>
		}
	else if(channel>=16 && channel<=23)
      f8:	8b 81       	ldd	r24, Y+3	; 0x03
      fa:	80 31       	cpi	r24, 0x10	; 16
      fc:	c0 f0       	brcs	.+48     	; 0x12e <DIO_read+0xac>
      fe:	8b 81       	ldd	r24, Y+3	; 0x03
     100:	88 31       	cpi	r24, 0x18	; 24
     102:	a8 f4       	brcc	.+42     	; 0x12e <DIO_read+0xac>
		{
			 x=GET_BIT(PINC,(channel-16));
     104:	e3 e3       	ldi	r30, 0x33	; 51
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	28 2f       	mov	r18, r24
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	8b 81       	ldd	r24, Y+3	; 0x03
     110:	88 2f       	mov	r24, r24
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	40 97       	sbiw	r24, 0x10	; 16
     116:	a9 01       	movw	r20, r18
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_read+0x9c>
     11a:	55 95       	asr	r21
     11c:	47 95       	ror	r20
     11e:	8a 95       	dec	r24
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_read+0x98>
     122:	ca 01       	movw	r24, r20
     124:	81 70       	andi	r24, 0x01	; 1
     126:	90 70       	andi	r25, 0x00	; 0
     128:	9a 83       	std	Y+2, r25	; 0x02
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	1a c0       	rjmp	.+52     	; 0x162 <DIO_read+0xe0>
		}
	else if(channel>=24 && channel<=31)
     12e:	8b 81       	ldd	r24, Y+3	; 0x03
     130:	88 31       	cpi	r24, 0x18	; 24
     132:	b8 f0       	brcs	.+46     	; 0x162 <DIO_read+0xe0>
     134:	8b 81       	ldd	r24, Y+3	; 0x03
     136:	80 32       	cpi	r24, 0x20	; 32
     138:	a0 f4       	brcc	.+40     	; 0x162 <DIO_read+0xe0>
		{
		 	x=GET_BIT(PIND,(channel-24));
     13a:	e0 e3       	ldi	r30, 0x30	; 48
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	28 2f       	mov	r18, r24
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	8b 81       	ldd	r24, Y+3	; 0x03
     146:	88 2f       	mov	r24, r24
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	48 97       	sbiw	r24, 0x18	; 24
     14c:	a9 01       	movw	r20, r18
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_read+0xd2>
     150:	55 95       	asr	r21
     152:	47 95       	ror	r20
     154:	8a 95       	dec	r24
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_read+0xce>
     158:	ca 01       	movw	r24, r20
     15a:	81 70       	andi	r24, 0x01	; 1
     15c:	90 70       	andi	r25, 0x00	; 0
     15e:	9a 83       	std	Y+2, r25	; 0x02
     160:	89 83       	std	Y+1, r24	; 0x01
		}

   return x;
     162:	89 81       	ldd	r24, Y+1	; 0x01
}
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	cf 91       	pop	r28
     16c:	df 91       	pop	r29
     16e:	08 95       	ret

00000170 <DIO_write>:

void DIO_write(Channel_Type channel,State_Type state)
{
     170:	df 93       	push	r29
     172:	cf 93       	push	r28
     174:	00 d0       	rcall	.+0      	; 0x176 <DIO_write+0x6>
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	89 83       	std	Y+1, r24	; 0x01
     17c:	6a 83       	std	Y+2, r22	; 0x02
	if(channel>=0 && channel<=7)
     17e:	89 81       	ldd	r24, Y+1	; 0x01
     180:	88 30       	cpi	r24, 0x08	; 8
     182:	60 f5       	brcc	.+88     	; 0x1dc <DIO_write+0x6c>
	{
		if(state==1)
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	a1 f4       	brne	.+40     	; 0x1b2 <DIO_write+0x42>
		{
			SET_BIT(PORTA,channel);
     18a:	ab e3       	ldi	r26, 0x3B	; 59
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	eb e3       	ldi	r30, 0x3B	; 59
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	48 2f       	mov	r20, r24
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 2e       	mov	r0, r18
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_write+0x38>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	0a 94       	dec	r0
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_write+0x34>
     1ac:	84 2b       	or	r24, r20
     1ae:	8c 93       	st	X, r24
     1b0:	bc c0       	rjmp	.+376    	; 0x32a <DIO_write+0x1ba>
		}
		else
			CLR_BIT(PORTA,channel);
     1b2:	ab e3       	ldi	r26, 0x3B	; 59
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	eb e3       	ldi	r30, 0x3B	; 59
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	48 2f       	mov	r20, r24
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	28 2f       	mov	r18, r24
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	02 2e       	mov	r0, r18
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_write+0x60>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	0a 94       	dec	r0
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_write+0x5c>
     1d4:	80 95       	com	r24
     1d6:	84 23       	and	r24, r20
     1d8:	8c 93       	st	X, r24
     1da:	a7 c0       	rjmp	.+334    	; 0x32a <DIO_write+0x1ba>
	}

	else if(channel>=8 && channel<=15)
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	88 30       	cpi	r24, 0x08	; 8
     1e0:	a8 f1       	brcs	.+106    	; 0x24c <DIO_write+0xdc>
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	80 31       	cpi	r24, 0x10	; 16
     1e6:	90 f5       	brcc	.+100    	; 0x24c <DIO_write+0xdc>
		{
		if(state==1)
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	b9 f4       	brne	.+46     	; 0x21c <DIO_write+0xac>
		{
			SET_BIT(PORTB,(channel-8));
     1ee:	a8 e3       	ldi	r26, 0x38	; 56
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	e8 e3       	ldi	r30, 0x38	; 56
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	48 2f       	mov	r20, r24
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	9c 01       	movw	r18, r24
     202:	28 50       	subi	r18, 0x08	; 8
     204:	30 40       	sbci	r19, 0x00	; 0
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	02 2e       	mov	r0, r18
     20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_write+0xa2>
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	0a 94       	dec	r0
     214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_write+0x9e>
     216:	84 2b       	or	r24, r20
     218:	8c 93       	st	X, r24
     21a:	87 c0       	rjmp	.+270    	; 0x32a <DIO_write+0x1ba>
		}
		else
			CLR_BIT(PORTB,(channel-8));
     21c:	a8 e3       	ldi	r26, 0x38	; 56
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e8 e3       	ldi	r30, 0x38	; 56
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	48 2f       	mov	r20, r24
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	88 2f       	mov	r24, r24
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	9c 01       	movw	r18, r24
     230:	28 50       	subi	r18, 0x08	; 8
     232:	30 40       	sbci	r19, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	02 2e       	mov	r0, r18
     23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write+0xd0>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	0a 94       	dec	r0
     242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write+0xcc>
     244:	80 95       	com	r24
     246:	84 23       	and	r24, r20
     248:	8c 93       	st	X, r24
     24a:	6f c0       	rjmp	.+222    	; 0x32a <DIO_write+0x1ba>
		}

	else if(channel>=16 && channel<=23)
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	80 31       	cpi	r24, 0x10	; 16
     250:	a8 f1       	brcs	.+106    	; 0x2bc <DIO_write+0x14c>
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	88 31       	cpi	r24, 0x18	; 24
     256:	90 f5       	brcc	.+100    	; 0x2bc <DIO_write+0x14c>
			{
			if(state==1)
     258:	8a 81       	ldd	r24, Y+2	; 0x02
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	b9 f4       	brne	.+46     	; 0x28c <DIO_write+0x11c>
			{
				SET_BIT(PORTC,(channel-16));
     25e:	a5 e3       	ldi	r26, 0x35	; 53
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e5 e3       	ldi	r30, 0x35	; 53
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	48 2f       	mov	r20, r24
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	88 2f       	mov	r24, r24
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	9c 01       	movw	r18, r24
     272:	20 51       	subi	r18, 0x10	; 16
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 2e       	mov	r0, r18
     27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_write+0x112>
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	0a 94       	dec	r0
     284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_write+0x10e>
     286:	84 2b       	or	r24, r20
     288:	8c 93       	st	X, r24
     28a:	4f c0       	rjmp	.+158    	; 0x32a <DIO_write+0x1ba>
			}
			else
				CLR_BIT(PORTC,(channel-16));
     28c:	a5 e3       	ldi	r26, 0x35	; 53
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e5 e3       	ldi	r30, 0x35	; 53
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	48 2f       	mov	r20, r24
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	88 2f       	mov	r24, r24
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	9c 01       	movw	r18, r24
     2a0:	20 51       	subi	r18, 0x10	; 16
     2a2:	30 40       	sbci	r19, 0x00	; 0
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 2e       	mov	r0, r18
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_write+0x140>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	0a 94       	dec	r0
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_write+0x13c>
     2b4:	80 95       	com	r24
     2b6:	84 23       	and	r24, r20
     2b8:	8c 93       	st	X, r24
     2ba:	37 c0       	rjmp	.+110    	; 0x32a <DIO_write+0x1ba>
			}

	else if(channel>=24 && channel<=31)
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	88 31       	cpi	r24, 0x18	; 24
     2c0:	a0 f1       	brcs	.+104    	; 0x32a <DIO_write+0x1ba>
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	80 32       	cpi	r24, 0x20	; 32
     2c6:	88 f5       	brcc	.+98     	; 0x32a <DIO_write+0x1ba>
			{
			if(state==1)
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	b9 f4       	brne	.+46     	; 0x2fc <DIO_write+0x18c>
			{
				SET_BIT(PORTD,(channel-24));
     2ce:	a2 e3       	ldi	r26, 0x32	; 50
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e2 e3       	ldi	r30, 0x32	; 50
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	48 2f       	mov	r20, r24
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	88 2f       	mov	r24, r24
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	9c 01       	movw	r18, r24
     2e2:	28 51       	subi	r18, 0x18	; 24
     2e4:	30 40       	sbci	r19, 0x00	; 0
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 2e       	mov	r0, r18
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_write+0x182>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_write+0x17e>
     2f6:	84 2b       	or	r24, r20
     2f8:	8c 93       	st	X, r24
     2fa:	17 c0       	rjmp	.+46     	; 0x32a <DIO_write+0x1ba>
			}
			else
				CLR_BIT(PORTD,(channel-24));
     2fc:	a2 e3       	ldi	r26, 0x32	; 50
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	e2 e3       	ldi	r30, 0x32	; 50
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	48 2f       	mov	r20, r24
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	88 2f       	mov	r24, r24
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	9c 01       	movw	r18, r24
     310:	28 51       	subi	r18, 0x18	; 24
     312:	30 40       	sbci	r19, 0x00	; 0
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	02 2e       	mov	r0, r18
     31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_write+0x1b0>
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	0a 94       	dec	r0
     322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_write+0x1ac>
     324:	80 95       	com	r24
     326:	84 23       	and	r24, r20
     328:	8c 93       	st	X, r24
			}



}
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	cf 91       	pop	r28
     330:	df 91       	pop	r29
     332:	08 95       	ret

00000334 <DIO_init>:



};

void DIO_init(void){
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	00 d0       	rcall	.+0      	; 0x33a <DIO_init+0x6>
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62

	int i=0;
     33e:	1a 82       	std	Y+2, r1	; 0x02
     340:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<sizeof((PIN_Config))/(sizeof(PIN_Config[0]));i++)
     342:	1a 82       	std	Y+2, r1	; 0x02
     344:	19 82       	std	Y+1, r1	; 0x01
     346:	5e c1       	rjmp	.+700    	; 0x604 <DIO_init+0x2d0>
		{

			if(PIN_Config[i].PORT==PORT_A)
     348:	29 81       	ldd	r18, Y+1	; 0x01
     34a:	3a 81       	ldd	r19, Y+2	; 0x02
     34c:	c9 01       	movw	r24, r18
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	82 0f       	add	r24, r18
     354:	93 1f       	adc	r25, r19
     356:	fc 01       	movw	r30, r24
     358:	e0 5a       	subi	r30, 0xA0	; 160
     35a:	ff 4f       	sbci	r31, 0xFF	; 255
     35c:	80 81       	ld	r24, Z
     35e:	88 23       	and	r24, r24
     360:	09 f0       	breq	.+2      	; 0x364 <DIO_init+0x30>
     362:	48 c0       	rjmp	.+144    	; 0x3f4 <DIO_init+0xc0>
			{
				if(PIN_Config[i].DIR==Output)
     364:	29 81       	ldd	r18, Y+1	; 0x01
     366:	3a 81       	ldd	r19, Y+2	; 0x02
     368:	c9 01       	movw	r24, r18
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	fc 01       	movw	r30, r24
     374:	ee 59       	subi	r30, 0x9E	; 158
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	80 81       	ld	r24, Z
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	f1 f4       	brne	.+60     	; 0x3ba <DIO_init+0x86>
				{
					SET_BIT(DDRA,PIN_Config[i].PIN);
     37e:	aa e3       	ldi	r26, 0x3A	; 58
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	ea e3       	ldi	r30, 0x3A	; 58
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	48 2f       	mov	r20, r24
     38a:	29 81       	ldd	r18, Y+1	; 0x01
     38c:	3a 81       	ldd	r19, Y+2	; 0x02
     38e:	c9 01       	movw	r24, r18
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	82 0f       	add	r24, r18
     396:	93 1f       	adc	r25, r19
     398:	fc 01       	movw	r30, r24
     39a:	ef 59       	subi	r30, 0x9F	; 159
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	80 81       	ld	r24, Z
     3a0:	28 2f       	mov	r18, r24
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	02 2e       	mov	r0, r18
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_init+0x7c>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_init+0x78>
     3b4:	84 2b       	or	r24, r20
     3b6:	8c 93       	st	X, r24
     3b8:	1d c0       	rjmp	.+58     	; 0x3f4 <DIO_init+0xc0>
				}
				else
					CLR_BIT(DDRA,PIN_Config[i].PIN);
     3ba:	aa e3       	ldi	r26, 0x3A	; 58
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	ea e3       	ldi	r30, 0x3A	; 58
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	48 2f       	mov	r20, r24
     3c6:	29 81       	ldd	r18, Y+1	; 0x01
     3c8:	3a 81       	ldd	r19, Y+2	; 0x02
     3ca:	c9 01       	movw	r24, r18
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
     3d4:	fc 01       	movw	r30, r24
     3d6:	ef 59       	subi	r30, 0x9F	; 159
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	80 81       	ld	r24, Z
     3dc:	28 2f       	mov	r18, r24
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_init+0xb6>
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	2a 95       	dec	r18
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_init+0xb2>
     3ee:	80 95       	com	r24
     3f0:	84 23       	and	r24, r20
     3f2:	8c 93       	st	X, r24
			}

			if(PIN_Config[i].PORT==PORT_B)
     3f4:	29 81       	ldd	r18, Y+1	; 0x01
     3f6:	3a 81       	ldd	r19, Y+2	; 0x02
     3f8:	c9 01       	movw	r24, r18
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	82 0f       	add	r24, r18
     400:	93 1f       	adc	r25, r19
     402:	fc 01       	movw	r30, r24
     404:	e0 5a       	subi	r30, 0xA0	; 160
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	80 81       	ld	r24, Z
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	09 f0       	breq	.+2      	; 0x410 <DIO_init+0xdc>
     40e:	48 c0       	rjmp	.+144    	; 0x4a0 <DIO_init+0x16c>
			{
				if(PIN_Config[i].DIR==Output)
     410:	29 81       	ldd	r18, Y+1	; 0x01
     412:	3a 81       	ldd	r19, Y+2	; 0x02
     414:	c9 01       	movw	r24, r18
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	fc 01       	movw	r30, r24
     420:	ee 59       	subi	r30, 0x9E	; 158
     422:	ff 4f       	sbci	r31, 0xFF	; 255
     424:	80 81       	ld	r24, Z
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	f1 f4       	brne	.+60     	; 0x466 <DIO_init+0x132>
				{
					SET_BIT(DDRB,PIN_Config[i].PIN);
     42a:	a7 e3       	ldi	r26, 0x37	; 55
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	e7 e3       	ldi	r30, 0x37	; 55
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	48 2f       	mov	r20, r24
     436:	29 81       	ldd	r18, Y+1	; 0x01
     438:	3a 81       	ldd	r19, Y+2	; 0x02
     43a:	c9 01       	movw	r24, r18
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	82 0f       	add	r24, r18
     442:	93 1f       	adc	r25, r19
     444:	fc 01       	movw	r30, r24
     446:	ef 59       	subi	r30, 0x9F	; 159
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	80 81       	ld	r24, Z
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 2e       	mov	r0, r18
     456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_init+0x128>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	0a 94       	dec	r0
     45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_init+0x124>
     460:	84 2b       	or	r24, r20
     462:	8c 93       	st	X, r24
     464:	1d c0       	rjmp	.+58     	; 0x4a0 <DIO_init+0x16c>
				}
				else
					CLR_BIT(DDRB,PIN_Config[i].PIN);
     466:	a7 e3       	ldi	r26, 0x37	; 55
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	e7 e3       	ldi	r30, 0x37	; 55
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	48 2f       	mov	r20, r24
     472:	29 81       	ldd	r18, Y+1	; 0x01
     474:	3a 81       	ldd	r19, Y+2	; 0x02
     476:	c9 01       	movw	r24, r18
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	82 0f       	add	r24, r18
     47e:	93 1f       	adc	r25, r19
     480:	fc 01       	movw	r30, r24
     482:	ef 59       	subi	r30, 0x9F	; 159
     484:	ff 4f       	sbci	r31, 0xFF	; 255
     486:	80 81       	ld	r24, Z
     488:	28 2f       	mov	r18, r24
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_init+0x162>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	2a 95       	dec	r18
     498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_init+0x15e>
     49a:	80 95       	com	r24
     49c:	84 23       	and	r24, r20
     49e:	8c 93       	st	X, r24
			}

			if(PIN_Config[i].PORT==PORT_C)
     4a0:	29 81       	ldd	r18, Y+1	; 0x01
     4a2:	3a 81       	ldd	r19, Y+2	; 0x02
     4a4:	c9 01       	movw	r24, r18
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	fc 01       	movw	r30, r24
     4b0:	e0 5a       	subi	r30, 0xA0	; 160
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
     4b4:	80 81       	ld	r24, Z
     4b6:	82 30       	cpi	r24, 0x02	; 2
     4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_init+0x188>
     4ba:	48 c0       	rjmp	.+144    	; 0x54c <DIO_init+0x218>
			{
				if(PIN_Config[i].DIR==Output)
     4bc:	29 81       	ldd	r18, Y+1	; 0x01
     4be:	3a 81       	ldd	r19, Y+2	; 0x02
     4c0:	c9 01       	movw	r24, r18
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	82 0f       	add	r24, r18
     4c8:	93 1f       	adc	r25, r19
     4ca:	fc 01       	movw	r30, r24
     4cc:	ee 59       	subi	r30, 0x9E	; 158
     4ce:	ff 4f       	sbci	r31, 0xFF	; 255
     4d0:	80 81       	ld	r24, Z
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	f1 f4       	brne	.+60     	; 0x512 <DIO_init+0x1de>
				{
					SET_BIT(DDRC,PIN_Config[i].PIN);
     4d6:	a4 e3       	ldi	r26, 0x34	; 52
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	e4 e3       	ldi	r30, 0x34	; 52
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	48 2f       	mov	r20, r24
     4e2:	29 81       	ldd	r18, Y+1	; 0x01
     4e4:	3a 81       	ldd	r19, Y+2	; 0x02
     4e6:	c9 01       	movw	r24, r18
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	82 0f       	add	r24, r18
     4ee:	93 1f       	adc	r25, r19
     4f0:	fc 01       	movw	r30, r24
     4f2:	ef 59       	subi	r30, 0x9F	; 159
     4f4:	ff 4f       	sbci	r31, 0xFF	; 255
     4f6:	80 81       	ld	r24, Z
     4f8:	28 2f       	mov	r18, r24
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	02 2e       	mov	r0, r18
     502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_init+0x1d4>
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	0a 94       	dec	r0
     50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_init+0x1d0>
     50c:	84 2b       	or	r24, r20
     50e:	8c 93       	st	X, r24
     510:	1d c0       	rjmp	.+58     	; 0x54c <DIO_init+0x218>
				}
				else
					CLR_BIT(DDRC,PIN_Config[i].PIN);
     512:	a4 e3       	ldi	r26, 0x34	; 52
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	e4 e3       	ldi	r30, 0x34	; 52
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	48 2f       	mov	r20, r24
     51e:	29 81       	ldd	r18, Y+1	; 0x01
     520:	3a 81       	ldd	r19, Y+2	; 0x02
     522:	c9 01       	movw	r24, r18
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	fc 01       	movw	r30, r24
     52e:	ef 59       	subi	r30, 0x9F	; 159
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	80 81       	ld	r24, Z
     534:	28 2f       	mov	r18, r24
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_init+0x20e>
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	2a 95       	dec	r18
     544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_init+0x20a>
     546:	80 95       	com	r24
     548:	84 23       	and	r24, r20
     54a:	8c 93       	st	X, r24
			}

			if(PIN_Config[i].PORT==PORT_D)
     54c:	29 81       	ldd	r18, Y+1	; 0x01
     54e:	3a 81       	ldd	r19, Y+2	; 0x02
     550:	c9 01       	movw	r24, r18
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	82 0f       	add	r24, r18
     558:	93 1f       	adc	r25, r19
     55a:	fc 01       	movw	r30, r24
     55c:	e0 5a       	subi	r30, 0xA0	; 160
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	80 81       	ld	r24, Z
     562:	83 30       	cpi	r24, 0x03	; 3
     564:	09 f0       	breq	.+2      	; 0x568 <DIO_init+0x234>
     566:	49 c0       	rjmp	.+146    	; 0x5fa <DIO_init+0x2c6>
			{
				if(PIN_Config[i].DIR==Output)
     568:	29 81       	ldd	r18, Y+1	; 0x01
     56a:	3a 81       	ldd	r19, Y+2	; 0x02
     56c:	c9 01       	movw	r24, r18
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	82 0f       	add	r24, r18
     574:	93 1f       	adc	r25, r19
     576:	fc 01       	movw	r30, r24
     578:	ee 59       	subi	r30, 0x9E	; 158
     57a:	ff 4f       	sbci	r31, 0xFF	; 255
     57c:	80 81       	ld	r24, Z
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	f1 f4       	brne	.+60     	; 0x5be <DIO_init+0x28a>
				{
					SET_BIT(DDRD,PIN_Config[i].PIN);
     582:	a1 e3       	ldi	r26, 0x31	; 49
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	e1 e3       	ldi	r30, 0x31	; 49
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	48 2f       	mov	r20, r24
     58e:	29 81       	ldd	r18, Y+1	; 0x01
     590:	3a 81       	ldd	r19, Y+2	; 0x02
     592:	c9 01       	movw	r24, r18
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	fc 01       	movw	r30, r24
     59e:	ef 59       	subi	r30, 0x9F	; 159
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	80 81       	ld	r24, Z
     5a4:	28 2f       	mov	r18, r24
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	02 2e       	mov	r0, r18
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_init+0x280>
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	0a 94       	dec	r0
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_init+0x27c>
     5b8:	84 2b       	or	r24, r20
     5ba:	8c 93       	st	X, r24
     5bc:	1e c0       	rjmp	.+60     	; 0x5fa <DIO_init+0x2c6>
				}
				else
					CLR_BIT(DDRD,PIN_Config[i].PIN);
     5be:	a1 e3       	ldi	r26, 0x31	; 49
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	e1 e3       	ldi	r30, 0x31	; 49
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	48 2f       	mov	r20, r24
     5ca:	29 81       	ldd	r18, Y+1	; 0x01
     5cc:	3a 81       	ldd	r19, Y+2	; 0x02
     5ce:	c9 01       	movw	r24, r18
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
     5d8:	fc 01       	movw	r30, r24
     5da:	ef 59       	subi	r30, 0x9F	; 159
     5dc:	ff 4f       	sbci	r31, 0xFF	; 255
     5de:	80 81       	ld	r24, Z
     5e0:	28 2f       	mov	r18, r24
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	02 2e       	mov	r0, r18
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_init+0x2bc>
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	0a 94       	dec	r0
     5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_init+0x2b8>
     5f4:	80 95       	com	r24
     5f6:	84 23       	and	r24, r20
     5f8:	8c 93       	st	X, r24
};

void DIO_init(void){

	int i=0;
	for(i=0;i<sizeof((PIN_Config))/(sizeof(PIN_Config[0]));i++)
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	9a 81       	ldd	r25, Y+2	; 0x02
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	9a 83       	std	Y+2, r25	; 0x02
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	9a 81       	ldd	r25, Y+2	; 0x02
     608:	80 32       	cpi	r24, 0x20	; 32
     60a:	91 05       	cpc	r25, r1
     60c:	08 f4       	brcc	.+2      	; 0x610 <DIO_init+0x2dc>
     60e:	9c ce       	rjmp	.-712    	; 0x348 <DIO_init+0x14>
				}
				else
					CLR_BIT(DDRD,PIN_Config[i].PIN);
			}
		}
}
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	08 95       	ret

0000061a <ADC_init>:
 *  Created on: Oct 2, 2021
 *      Author: HP
 */
#include"ADC.h"

void ADC_init(){
     61a:	df 93       	push	r29
     61c:	cf 93       	push	r28
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62

#if(ADC_START == ENABLE)
	SET_BIT(ADCSRA,ADEN);
     622:	a6 e2       	ldi	r26, 0x26	; 38
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e6 e2       	ldi	r30, 0x26	; 38
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	80 68       	ori	r24, 0x80	; 128
     62e:	8c 93       	st	X, r24
#else
	CLR_BIT(ADCSRA,ADEN);
#endif

#if ADSC_START == ENABLE
	SET_BIT(ADCSRA,ADSC);
     630:	a6 e2       	ldi	r26, 0x26	; 38
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	e6 e2       	ldi	r30, 0x26	; 38
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	80 64       	ori	r24, 0x40	; 64
     63c:	8c 93       	st	X, r24


#if(ADC_INTERRUPT_ENABLE == ENABLE)
	SET_BIT(ADCSRA,ADIE);
#else
	CLR_BIT(ADCSRA,ADIE);
     63e:	a6 e2       	ldi	r26, 0x26	; 38
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e6 e2       	ldi	r30, 0x26	; 38
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	87 7f       	andi	r24, 0xF7	; 247
     64a:	8c 93       	st	X, r24
#endif

#if(ADC_LeftAdjust == ENABLE)
	SET_BIT(ADMUX,ADLAR);
     64c:	a7 e2       	ldi	r26, 0x27	; 39
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	e7 e2       	ldi	r30, 0x27	; 39
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	80 62       	ori	r24, 0x20	; 32
     658:	8c 93       	st	X, r24
    CLR_BIT(ADMUX,REFS1);
	}

#elif(ADC_MODE == ADC_AVCC_VOLTAGE)
	{
		SET_BIT(ADMUX,REFS0);
     65a:	a7 e2       	ldi	r26, 0x27	; 39
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	e7 e2       	ldi	r30, 0x27	; 39
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	80 64       	ori	r24, 0x40	; 64
     666:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
     668:	a7 e2       	ldi	r26, 0x27	; 39
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	e7 e2       	ldi	r30, 0x27	; 39
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	8f 77       	andi	r24, 0x7F	; 127
     674:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	}

#elif(FREQ_PRESCALE == PRESCALE_128)
	{
		SET_BIT(ADCSRA,ADPS0);
     676:	a6 e2       	ldi	r26, 0x26	; 38
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e6 e2       	ldi	r30, 0x26	; 38
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	81 60       	ori	r24, 0x01	; 1
     682:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
     684:	a6 e2       	ldi	r26, 0x26	; 38
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	e6 e2       	ldi	r30, 0x26	; 38
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
     692:	a6 e2       	ldi	r26, 0x26	; 38
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	e6 e2       	ldi	r30, 0x26	; 38
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	84 60       	ori	r24, 0x04	; 4
     69e:	8c 93       	st	X, r24
	}
#endif
}
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	08 95       	ret

000006a6 <ADC_read>:

uint16 ADC_read(uint8 Channel){
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	0f 92       	push	r0
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (ADMUX & 0b11100000) | Channel;
     6b2:	a7 e2       	ldi	r26, 0x27	; 39
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	e7 e2       	ldi	r30, 0x27	; 39
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	98 2f       	mov	r25, r24
     6be:	90 7e       	andi	r25, 0xE0	; 224
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	89 2b       	or	r24, r25
     6c4:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC); //Start Conversion
     6c6:	a6 e2       	ldi	r26, 0x26	; 38
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	e6 e2       	ldi	r30, 0x26	; 38
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	80 81       	ld	r24, Z
     6d0:	80 64       	ori	r24, 0x40	; 64
     6d2:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,ADIF)==0); //Wait for Finishing Conversion
     6d4:	e6 e2       	ldi	r30, 0x26	; 38
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	82 95       	swap	r24
     6dc:	8f 70       	andi	r24, 0x0F	; 15
     6de:	88 2f       	mov	r24, r24
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	81 70       	andi	r24, 0x01	; 1
     6e4:	90 70       	andi	r25, 0x00	; 0
     6e6:	00 97       	sbiw	r24, 0x00	; 0
     6e8:	a9 f3       	breq	.-22     	; 0x6d4 <ADC_read+0x2e>
	SET_BIT(ADCSRA,ADIF);
     6ea:	a6 e2       	ldi	r26, 0x26	; 38
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	e6 e2       	ldi	r30, 0x26	; 38
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	80 61       	ori	r24, 0x10	; 16
     6f6:	8c 93       	st	X, r24
	return ADC;
     6f8:	e4 e2       	ldi	r30, 0x24	; 36
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	91 81       	ldd	r25, Z+1	; 0x01
}
     700:	0f 90       	pop	r0
     702:	cf 91       	pop	r28
     704:	df 91       	pop	r29
     706:	08 95       	ret

00000708 <LCD_init>:
 *      Author: HP
 */
#include"LCD.h"
#include<util/delay.h>

void LCD_init(void){
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	2e 97       	sbiw	r28, 0x0e	; 14
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a0 ea       	ldi	r26, 0xA0	; 160
     722:	b1 e4       	ldi	r27, 0x41	; 65
     724:	8b 87       	std	Y+11, r24	; 0x0b
     726:	9c 87       	std	Y+12, r25	; 0x0c
     728:	ad 87       	std	Y+13, r26	; 0x0d
     72a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     72c:	6b 85       	ldd	r22, Y+11	; 0x0b
     72e:	7c 85       	ldd	r23, Y+12	; 0x0c
     730:	8d 85       	ldd	r24, Y+13	; 0x0d
     732:	9e 85       	ldd	r25, Y+14	; 0x0e
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	4a e7       	ldi	r20, 0x7A	; 122
     73a:	55 e4       	ldi	r21, 0x45	; 69
     73c:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	8f 83       	std	Y+7, r24	; 0x07
     746:	98 87       	std	Y+8, r25	; 0x08
     748:	a9 87       	std	Y+9, r26	; 0x09
     74a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     74c:	6f 81       	ldd	r22, Y+7	; 0x07
     74e:	78 85       	ldd	r23, Y+8	; 0x08
     750:	89 85       	ldd	r24, Y+9	; 0x09
     752:	9a 85       	ldd	r25, Y+10	; 0x0a
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e8       	ldi	r20, 0x80	; 128
     75a:	5f e3       	ldi	r21, 0x3F	; 63
     75c:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
     760:	88 23       	and	r24, r24
     762:	2c f4       	brge	.+10     	; 0x76e <LCD_init+0x66>
		__ticks = 1;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	9e 83       	std	Y+6, r25	; 0x06
     76a:	8d 83       	std	Y+5, r24	; 0x05
     76c:	3f c0       	rjmp	.+126    	; 0x7ec <LCD_init+0xe4>
	else if (__tmp > 65535)
     76e:	6f 81       	ldd	r22, Y+7	; 0x07
     770:	78 85       	ldd	r23, Y+8	; 0x08
     772:	89 85       	ldd	r24, Y+9	; 0x09
     774:	9a 85       	ldd	r25, Y+10	; 0x0a
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	3f ef       	ldi	r19, 0xFF	; 255
     77a:	4f e7       	ldi	r20, 0x7F	; 127
     77c:	57 e4       	ldi	r21, 0x47	; 71
     77e:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
     782:	18 16       	cp	r1, r24
     784:	4c f5       	brge	.+82     	; 0x7d8 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     786:	6b 85       	ldd	r22, Y+11	; 0x0b
     788:	7c 85       	ldd	r23, Y+12	; 0x0c
     78a:	8d 85       	ldd	r24, Y+13	; 0x0d
     78c:	9e 85       	ldd	r25, Y+14	; 0x0e
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e2       	ldi	r20, 0x20	; 32
     794:	51 e4       	ldi	r21, 0x41	; 65
     796:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     79a:	dc 01       	movw	r26, r24
     79c:	cb 01       	movw	r24, r22
     79e:	bc 01       	movw	r22, r24
     7a0:	cd 01       	movw	r24, r26
     7a2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	9e 83       	std	Y+6, r25	; 0x06
     7ac:	8d 83       	std	Y+5, r24	; 0x05
     7ae:	0f c0       	rjmp	.+30     	; 0x7ce <LCD_init+0xc6>
     7b0:	80 e9       	ldi	r24, 0x90	; 144
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	9c 81       	ldd	r25, Y+4	; 0x04
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <LCD_init+0xb4>
     7c0:	9c 83       	std	Y+4, r25	; 0x04
     7c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	9e 81       	ldd	r25, Y+6	; 0x06
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	9e 83       	std	Y+6, r25	; 0x06
     7cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ce:	8d 81       	ldd	r24, Y+5	; 0x05
     7d0:	9e 81       	ldd	r25, Y+6	; 0x06
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	69 f7       	brne	.-38     	; 0x7b0 <LCD_init+0xa8>
     7d6:	14 c0       	rjmp	.+40     	; 0x800 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d8:	6f 81       	ldd	r22, Y+7	; 0x07
     7da:	78 85       	ldd	r23, Y+8	; 0x08
     7dc:	89 85       	ldd	r24, Y+9	; 0x09
     7de:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	9e 83       	std	Y+6, r25	; 0x06
     7ea:	8d 83       	std	Y+5, r24	; 0x05
     7ec:	8d 81       	ldd	r24, Y+5	; 0x05
     7ee:	9e 81       	ldd	r25, Y+6	; 0x06
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_init+0xf0>
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);
	LCD_SendCMD(0x33);
     800:	83 e3       	ldi	r24, 0x33	; 51
     802:	0e 94 75 08 	call	0x10ea	; 0x10ea <LCD_SendCMD>
	LCD_SendCMD(0x32); //Send for 4 Bit Initialization of LCD
     806:	82 e3       	ldi	r24, 0x32	; 50
     808:	0e 94 75 08 	call	0x10ea	; 0x10ea <LCD_SendCMD>
	LCD_SendCMD(0x28); //Select 4 Bit Mode, 5*7 Dots
     80c:	88 e2       	ldi	r24, 0x28	; 40
     80e:	0e 94 75 08 	call	0x10ea	; 0x10ea <LCD_SendCMD>
	LCD_SendCMD(0x0C); //Display on,Cursor OFF
     812:	8c e0       	ldi	r24, 0x0C	; 12
     814:	0e 94 75 08 	call	0x10ea	; 0x10ea <LCD_SendCMD>
	LCD_SendCMD(0x06); //Entry Mode Increment Cursor to Right
     818:	86 e0       	ldi	r24, 0x06	; 6
     81a:	0e 94 75 08 	call	0x10ea	; 0x10ea <LCD_SendCMD>
	LCD_SendCMD(0x01); //Clear Display
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 75 08 	call	0x10ea	; 0x10ea <LCD_SendCMD>


}
     824:	2e 96       	adiw	r28, 0x0e	; 14
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	cf 91       	pop	r28
     832:	df 91       	pop	r29
     834:	08 95       	ret

00000836 <LCD_SendChar>:

void LCD_SendChar(uint8 data){
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	df 93       	push	r29
     83c:	cf 93       	push	r28
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	c1 56       	subi	r28, 0x61	; 97
     844:	d0 40       	sbci	r29, 0x00	; 0
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	fe 01       	movw	r30, r28
     852:	ef 59       	subi	r30, 0x9F	; 159
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	80 83       	st	Z, r24
  DIO_write(LCD_Rs,HIGH);
     858:	89 e0       	ldi	r24, 0x09	; 9
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
  DIO_write(LCD_Rw,LOW);
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>

  if(GET_BIT(data,4)) {DIO_write(LCD_D4,HIGH);} else {DIO_write(LCD_D4,LOW);}
     868:	fe 01       	movw	r30, r28
     86a:	ef 59       	subi	r30, 0x9F	; 159
     86c:	ff 4f       	sbci	r31, 0xFF	; 255
     86e:	80 81       	ld	r24, Z
     870:	82 95       	swap	r24
     872:	8f 70       	andi	r24, 0x0F	; 15
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	90 70       	andi	r25, 0x00	; 0
     87c:	88 23       	and	r24, r24
     87e:	29 f0       	breq	.+10     	; 0x88a <__stack+0x2b>
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     888:	04 c0       	rjmp	.+8      	; 0x892 <__stack+0x33>
     88a:	84 e0       	ldi	r24, 0x04	; 4
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
  if(GET_BIT(data,5)) {DIO_write(LCD_D5,HIGH);} else {DIO_write(LCD_D5,LOW);}
     892:	fe 01       	movw	r30, r28
     894:	ef 59       	subi	r30, 0x9F	; 159
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	80 81       	ld	r24, Z
     89a:	82 95       	swap	r24
     89c:	86 95       	lsr	r24
     89e:	87 70       	andi	r24, 0x07	; 7
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	81 70       	andi	r24, 0x01	; 1
     8a6:	90 70       	andi	r25, 0x00	; 0
     8a8:	88 23       	and	r24, r24
     8aa:	29 f0       	breq	.+10     	; 0x8b6 <__stack+0x57>
     8ac:	85 e0       	ldi	r24, 0x05	; 5
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     8b4:	04 c0       	rjmp	.+8      	; 0x8be <__stack+0x5f>
     8b6:	85 e0       	ldi	r24, 0x05	; 5
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
  if(GET_BIT(data,6)) {DIO_write(LCD_D6,HIGH);} else {DIO_write(LCD_D6,LOW);}
     8be:	fe 01       	movw	r30, r28
     8c0:	ef 59       	subi	r30, 0x9F	; 159
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	80 81       	ld	r24, Z
     8c6:	82 95       	swap	r24
     8c8:	86 95       	lsr	r24
     8ca:	86 95       	lsr	r24
     8cc:	83 70       	andi	r24, 0x03	; 3
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	81 70       	andi	r24, 0x01	; 1
     8d4:	90 70       	andi	r25, 0x00	; 0
     8d6:	88 23       	and	r24, r24
     8d8:	29 f0       	breq	.+10     	; 0x8e4 <__stack+0x85>
     8da:	86 e0       	ldi	r24, 0x06	; 6
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__stack+0x8d>
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
  if(GET_BIT(data,7)) {DIO_write(LCD_D7,HIGH);} else {DIO_write(LCD_D7,LOW);}
     8ec:	fe 01       	movw	r30, r28
     8ee:	ef 59       	subi	r30, 0x9F	; 159
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	80 81       	ld	r24, Z
     8f4:	88 23       	and	r24, r24
     8f6:	2c f4       	brge	.+10     	; 0x902 <__stack+0xa3>
     8f8:	87 e0       	ldi	r24, 0x07	; 7
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     900:	04 c0       	rjmp	.+8      	; 0x90a <__stack+0xab>
     902:	87 e0       	ldi	r24, 0x07	; 7
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>

  DIO_write(LCD_E,HIGH);
     90a:	8b e0       	ldi	r24, 0x0B	; 11
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     912:	fe 01       	movw	r30, r28
     914:	e3 5a       	subi	r30, 0xA3	; 163
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e2       	ldi	r26, 0x20	; 32
     91e:	b1 e4       	ldi	r27, 0x41	; 65
     920:	80 83       	st	Z, r24
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	a2 83       	std	Z+2, r26	; 0x02
     926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     928:	8e 01       	movw	r16, r28
     92a:	07 5a       	subi	r16, 0xA7	; 167
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	fe 01       	movw	r30, r28
     930:	e3 5a       	subi	r30, 0xA3	; 163
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	60 81       	ld	r22, Z
     936:	71 81       	ldd	r23, Z+1	; 0x01
     938:	82 81       	ldd	r24, Z+2	; 0x02
     93a:	93 81       	ldd	r25, Z+3	; 0x03
     93c:	2b ea       	ldi	r18, 0xAB	; 171
     93e:	3a ea       	ldi	r19, 0xAA	; 170
     940:	4a ea       	ldi	r20, 0xAA	; 170
     942:	50 e4       	ldi	r21, 0x40	; 64
     944:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	f8 01       	movw	r30, r16
     94e:	80 83       	st	Z, r24
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	a2 83       	std	Z+2, r26	; 0x02
     954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     956:	fe 01       	movw	r30, r28
     958:	e7 5a       	subi	r30, 0xA7	; 167
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
     95c:	60 81       	ld	r22, Z
     95e:	71 81       	ldd	r23, Z+1	; 0x01
     960:	82 81       	ldd	r24, Z+2	; 0x02
     962:	93 81       	ldd	r25, Z+3	; 0x03
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e8       	ldi	r20, 0x80	; 128
     96a:	5f e3       	ldi	r21, 0x3F	; 63
     96c:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
     970:	88 23       	and	r24, r24
     972:	34 f4       	brge	.+12     	; 0x980 <__stack+0x121>
		__ticks = 1;
     974:	fe 01       	movw	r30, r28
     976:	e8 5a       	subi	r30, 0xA8	; 168
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 83       	st	Z, r24
     97e:	e0 c0       	rjmp	.+448    	; 0xb40 <__stack+0x2e1>
	else if (__tmp > 255)
     980:	fe 01       	movw	r30, r28
     982:	e7 5a       	subi	r30, 0xA7	; 167
     984:	ff 4f       	sbci	r31, 0xFF	; 255
     986:	60 81       	ld	r22, Z
     988:	71 81       	ldd	r23, Z+1	; 0x01
     98a:	82 81       	ldd	r24, Z+2	; 0x02
     98c:	93 81       	ldd	r25, Z+3	; 0x03
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	4f e7       	ldi	r20, 0x7F	; 127
     994:	53 e4       	ldi	r21, 0x43	; 67
     996:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
     99a:	18 16       	cp	r1, r24
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__stack+0x141>
     99e:	c0 c0       	rjmp	.+384    	; 0xb20 <__stack+0x2c1>
	{
		_delay_ms(__us / 1000.0);
     9a0:	fe 01       	movw	r30, r28
     9a2:	e3 5a       	subi	r30, 0xA3	; 163
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	60 81       	ld	r22, Z
     9a8:	71 81       	ldd	r23, Z+1	; 0x01
     9aa:	82 81       	ldd	r24, Z+2	; 0x02
     9ac:	93 81       	ldd	r25, Z+3	; 0x03
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	4a e7       	ldi	r20, 0x7A	; 122
     9b4:	54 e4       	ldi	r21, 0x44	; 68
     9b6:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
     9ba:	dc 01       	movw	r26, r24
     9bc:	cb 01       	movw	r24, r22
     9be:	fe 01       	movw	r30, r28
     9c0:	ec 5a       	subi	r30, 0xAC	; 172
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	80 83       	st	Z, r24
     9c6:	91 83       	std	Z+1, r25	; 0x01
     9c8:	a2 83       	std	Z+2, r26	; 0x02
     9ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9cc:	8e 01       	movw	r16, r28
     9ce:	00 5b       	subi	r16, 0xB0	; 176
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	fe 01       	movw	r30, r28
     9d4:	ec 5a       	subi	r30, 0xAC	; 172
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	60 81       	ld	r22, Z
     9da:	71 81       	ldd	r23, Z+1	; 0x01
     9dc:	82 81       	ldd	r24, Z+2	; 0x02
     9de:	93 81       	ldd	r25, Z+3	; 0x03
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	4a e7       	ldi	r20, 0x7A	; 122
     9e6:	55 e4       	ldi	r21, 0x45	; 69
     9e8:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	f8 01       	movw	r30, r16
     9f2:	80 83       	st	Z, r24
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	a2 83       	std	Z+2, r26	; 0x02
     9f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9fa:	fe 01       	movw	r30, r28
     9fc:	e0 5b       	subi	r30, 0xB0	; 176
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	60 81       	ld	r22, Z
     a02:	71 81       	ldd	r23, Z+1	; 0x01
     a04:	82 81       	ldd	r24, Z+2	; 0x02
     a06:	93 81       	ldd	r25, Z+3	; 0x03
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e8       	ldi	r20, 0x80	; 128
     a0e:	5f e3       	ldi	r21, 0x3F	; 63
     a10:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
     a14:	88 23       	and	r24, r24
     a16:	44 f4       	brge	.+16     	; 0xa28 <__stack+0x1c9>
		__ticks = 1;
     a18:	fe 01       	movw	r30, r28
     a1a:	e2 5b       	subi	r30, 0xB2	; 178
     a1c:	ff 4f       	sbci	r31, 0xFF	; 255
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	80 83       	st	Z, r24
     a26:	64 c0       	rjmp	.+200    	; 0xaf0 <__stack+0x291>
	else if (__tmp > 65535)
     a28:	fe 01       	movw	r30, r28
     a2a:	e0 5b       	subi	r30, 0xB0	; 176
     a2c:	ff 4f       	sbci	r31, 0xFF	; 255
     a2e:	60 81       	ld	r22, Z
     a30:	71 81       	ldd	r23, Z+1	; 0x01
     a32:	82 81       	ldd	r24, Z+2	; 0x02
     a34:	93 81       	ldd	r25, Z+3	; 0x03
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	3f ef       	ldi	r19, 0xFF	; 255
     a3a:	4f e7       	ldi	r20, 0x7F	; 127
     a3c:	57 e4       	ldi	r21, 0x47	; 71
     a3e:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
     a42:	18 16       	cp	r1, r24
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__stack+0x1e9>
     a46:	43 c0       	rjmp	.+134    	; 0xace <__stack+0x26f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a48:	fe 01       	movw	r30, r28
     a4a:	ec 5a       	subi	r30, 0xAC	; 172
     a4c:	ff 4f       	sbci	r31, 0xFF	; 255
     a4e:	60 81       	ld	r22, Z
     a50:	71 81       	ldd	r23, Z+1	; 0x01
     a52:	82 81       	ldd	r24, Z+2	; 0x02
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e2       	ldi	r20, 0x20	; 32
     a5c:	51 e4       	ldi	r21, 0x41	; 65
     a5e:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	8e 01       	movw	r16, r28
     a68:	02 5b       	subi	r16, 0xB2	; 178
     a6a:	1f 4f       	sbci	r17, 0xFF	; 255
     a6c:	bc 01       	movw	r22, r24
     a6e:	cd 01       	movw	r24, r26
     a70:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	f8 01       	movw	r30, r16
     a7a:	91 83       	std	Z+1, r25	; 0x01
     a7c:	80 83       	st	Z, r24
     a7e:	1f c0       	rjmp	.+62     	; 0xabe <__stack+0x25f>
     a80:	fe 01       	movw	r30, r28
     a82:	e4 5b       	subi	r30, 0xB4	; 180
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 e9       	ldi	r24, 0x90	; 144
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	80 83       	st	Z, r24
     a8e:	fe 01       	movw	r30, r28
     a90:	e4 5b       	subi	r30, 0xB4	; 180
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <__stack+0x239>
     a9c:	fe 01       	movw	r30, r28
     a9e:	e4 5b       	subi	r30, 0xB4	; 180
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	91 83       	std	Z+1, r25	; 0x01
     aa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa6:	de 01       	movw	r26, r28
     aa8:	a2 5b       	subi	r26, 0xB2	; 178
     aaa:	bf 4f       	sbci	r27, 0xFF	; 255
     aac:	fe 01       	movw	r30, r28
     aae:	e2 5b       	subi	r30, 0xB2	; 178
     ab0:	ff 4f       	sbci	r31, 0xFF	; 255
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	11 96       	adiw	r26, 0x01	; 1
     aba:	9c 93       	st	X, r25
     abc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     abe:	fe 01       	movw	r30, r28
     ac0:	e2 5b       	subi	r30, 0xB2	; 178
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	d1 f6       	brne	.-76     	; 0xa80 <__stack+0x221>
     acc:	4b c0       	rjmp	.+150    	; 0xb64 <__stack+0x305>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ace:	8e 01       	movw	r16, r28
     ad0:	02 5b       	subi	r16, 0xB2	; 178
     ad2:	1f 4f       	sbci	r17, 0xFF	; 255
     ad4:	fe 01       	movw	r30, r28
     ad6:	e0 5b       	subi	r30, 0xB0	; 176
     ad8:	ff 4f       	sbci	r31, 0xFF	; 255
     ada:	60 81       	ld	r22, Z
     adc:	71 81       	ldd	r23, Z+1	; 0x01
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	f8 01       	movw	r30, r16
     aec:	91 83       	std	Z+1, r25	; 0x01
     aee:	80 83       	st	Z, r24
     af0:	de 01       	movw	r26, r28
     af2:	a6 5b       	subi	r26, 0xB6	; 182
     af4:	bf 4f       	sbci	r27, 0xFF	; 255
     af6:	fe 01       	movw	r30, r28
     af8:	e2 5b       	subi	r30, 0xB2	; 178
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	11 96       	adiw	r26, 0x01	; 1
     b02:	9c 93       	st	X, r25
     b04:	8e 93       	st	-X, r24
     b06:	fe 01       	movw	r30, r28
     b08:	e6 5b       	subi	r30, 0xB6	; 182
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <__stack+0x2b1>
     b14:	fe 01       	movw	r30, r28
     b16:	e6 5b       	subi	r30, 0xB6	; 182
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	91 83       	std	Z+1, r25	; 0x01
     b1c:	80 83       	st	Z, r24
     b1e:	22 c0       	rjmp	.+68     	; 0xb64 <__stack+0x305>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b20:	8e 01       	movw	r16, r28
     b22:	08 5a       	subi	r16, 0xA8	; 168
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	fe 01       	movw	r30, r28
     b28:	e7 5a       	subi	r30, 0xA7	; 167
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	60 81       	ld	r22, Z
     b2e:	71 81       	ldd	r23, Z+1	; 0x01
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	93 81       	ldd	r25, Z+3	; 0x03
     b34:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	f8 01       	movw	r30, r16
     b3e:	80 83       	st	Z, r24
     b40:	de 01       	movw	r26, r28
     b42:	a7 5b       	subi	r26, 0xB7	; 183
     b44:	bf 4f       	sbci	r27, 0xFF	; 255
     b46:	fe 01       	movw	r30, r28
     b48:	e8 5a       	subi	r30, 0xA8	; 168
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	80 81       	ld	r24, Z
     b4e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b50:	fe 01       	movw	r30, r28
     b52:	e7 5b       	subi	r30, 0xB7	; 183
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 81       	ld	r24, Z
     b58:	8a 95       	dec	r24
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <__stack+0x2f9>
     b5c:	fe 01       	movw	r30, r28
     b5e:	e7 5b       	subi	r30, 0xB7	; 183
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	80 83       	st	Z, r24
  _delay_us(10);
  DIO_write(LCD_E,LOW);
     b64:	8b e0       	ldi	r24, 0x0B	; 11
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     b6c:	fe 01       	movw	r30, r28
     b6e:	eb 5b       	subi	r30, 0xBB	; 187
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a8 e4       	ldi	r26, 0x48	; 72
     b78:	b3 e4       	ldi	r27, 0x43	; 67
     b7a:	80 83       	st	Z, r24
     b7c:	91 83       	std	Z+1, r25	; 0x01
     b7e:	a2 83       	std	Z+2, r26	; 0x02
     b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     b82:	8e 01       	movw	r16, r28
     b84:	0f 5b       	subi	r16, 0xBF	; 191
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	fe 01       	movw	r30, r28
     b8a:	eb 5b       	subi	r30, 0xBB	; 187
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	60 81       	ld	r22, Z
     b90:	71 81       	ldd	r23, Z+1	; 0x01
     b92:	82 81       	ldd	r24, Z+2	; 0x02
     b94:	93 81       	ldd	r25, Z+3	; 0x03
     b96:	2b ea       	ldi	r18, 0xAB	; 171
     b98:	3a ea       	ldi	r19, 0xAA	; 170
     b9a:	4a ea       	ldi	r20, 0xAA	; 170
     b9c:	50 e4       	ldi	r21, 0x40	; 64
     b9e:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	f8 01       	movw	r30, r16
     ba8:	80 83       	st	Z, r24
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	a2 83       	std	Z+2, r26	; 0x02
     bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bb0:	fe 01       	movw	r30, r28
     bb2:	ef 5b       	subi	r30, 0xBF	; 191
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	60 81       	ld	r22, Z
     bb8:	71 81       	ldd	r23, Z+1	; 0x01
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	93 81       	ldd	r25, Z+3	; 0x03
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e8       	ldi	r20, 0x80	; 128
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
     bca:	88 23       	and	r24, r24
     bcc:	34 f4       	brge	.+12     	; 0xbda <__stack+0x37b>
		__ticks = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	fe 01       	movw	r30, r28
     bd2:	e0 5c       	subi	r30, 0xC0	; 192
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	80 83       	st	Z, r24
     bd8:	9d c0       	rjmp	.+314    	; 0xd14 <__stack+0x4b5>
	else if (__tmp > 255)
     bda:	fe 01       	movw	r30, r28
     bdc:	ef 5b       	subi	r30, 0xBF	; 191
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	53 e4       	ldi	r21, 0x43	; 67
     bf0:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	7e c0       	rjmp	.+252    	; 0xcf6 <__stack+0x497>
	{
		_delay_ms(__us / 1000.0);
     bfa:	fe 01       	movw	r30, r28
     bfc:	eb 5b       	subi	r30, 0xBB	; 187
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	4a e7       	ldi	r20, 0x7A	; 122
     c0e:	54 e4       	ldi	r21, 0x44	; 68
     c10:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	8c af       	std	Y+60, r24	; 0x3c
     c1a:	9d af       	std	Y+61, r25	; 0x3d
     c1c:	ae af       	std	Y+62, r26	; 0x3e
     c1e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c20:	6c ad       	ldd	r22, Y+60	; 0x3c
     c22:	7d ad       	ldd	r23, Y+61	; 0x3d
     c24:	8e ad       	ldd	r24, Y+62	; 0x3e
     c26:	9f ad       	ldd	r25, Y+63	; 0x3f
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	4a e7       	ldi	r20, 0x7A	; 122
     c2e:	55 e4       	ldi	r21, 0x45	; 69
     c30:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	88 af       	std	Y+56, r24	; 0x38
     c3a:	99 af       	std	Y+57, r25	; 0x39
     c3c:	aa af       	std	Y+58, r26	; 0x3a
     c3e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     c40:	68 ad       	ldd	r22, Y+56	; 0x38
     c42:	79 ad       	ldd	r23, Y+57	; 0x39
     c44:	8a ad       	ldd	r24, Y+58	; 0x3a
     c46:	9b ad       	ldd	r25, Y+59	; 0x3b
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e8       	ldi	r20, 0x80	; 128
     c4e:	5f e3       	ldi	r21, 0x3F	; 63
     c50:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
     c54:	88 23       	and	r24, r24
     c56:	2c f4       	brge	.+10     	; 0xc62 <__stack+0x403>
		__ticks = 1;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	9f ab       	std	Y+55, r25	; 0x37
     c5e:	8e ab       	std	Y+54, r24	; 0x36
     c60:	3f c0       	rjmp	.+126    	; 0xce0 <__stack+0x481>
	else if (__tmp > 65535)
     c62:	68 ad       	ldd	r22, Y+56	; 0x38
     c64:	79 ad       	ldd	r23, Y+57	; 0x39
     c66:	8a ad       	ldd	r24, Y+58	; 0x3a
     c68:	9b ad       	ldd	r25, Y+59	; 0x3b
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	3f ef       	ldi	r19, 0xFF	; 255
     c6e:	4f e7       	ldi	r20, 0x7F	; 127
     c70:	57 e4       	ldi	r21, 0x47	; 71
     c72:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
     c76:	18 16       	cp	r1, r24
     c78:	4c f5       	brge	.+82     	; 0xccc <__stack+0x46d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7a:	6c ad       	ldd	r22, Y+60	; 0x3c
     c7c:	7d ad       	ldd	r23, Y+61	; 0x3d
     c7e:	8e ad       	ldd	r24, Y+62	; 0x3e
     c80:	9f ad       	ldd	r25, Y+63	; 0x3f
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e2       	ldi	r20, 0x20	; 32
     c88:	51 e4       	ldi	r21, 0x41	; 65
     c8a:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	bc 01       	movw	r22, r24
     c94:	cd 01       	movw	r24, r26
     c96:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	9f ab       	std	Y+55, r25	; 0x37
     ca0:	8e ab       	std	Y+54, r24	; 0x36
     ca2:	0f c0       	rjmp	.+30     	; 0xcc2 <__stack+0x463>
     ca4:	80 e9       	ldi	r24, 0x90	; 144
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	9d ab       	std	Y+53, r25	; 0x35
     caa:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cac:	8c a9       	ldd	r24, Y+52	; 0x34
     cae:	9d a9       	ldd	r25, Y+53	; 0x35
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <__stack+0x451>
     cb4:	9d ab       	std	Y+53, r25	; 0x35
     cb6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb8:	8e a9       	ldd	r24, Y+54	; 0x36
     cba:	9f a9       	ldd	r25, Y+55	; 0x37
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	9f ab       	std	Y+55, r25	; 0x37
     cc0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc2:	8e a9       	ldd	r24, Y+54	; 0x36
     cc4:	9f a9       	ldd	r25, Y+55	; 0x37
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	69 f7       	brne	.-38     	; 0xca4 <__stack+0x445>
     cca:	2d c0       	rjmp	.+90     	; 0xd26 <__stack+0x4c7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ccc:	68 ad       	ldd	r22, Y+56	; 0x38
     cce:	79 ad       	ldd	r23, Y+57	; 0x39
     cd0:	8a ad       	ldd	r24, Y+58	; 0x3a
     cd2:	9b ad       	ldd	r25, Y+59	; 0x3b
     cd4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	9f ab       	std	Y+55, r25	; 0x37
     cde:	8e ab       	std	Y+54, r24	; 0x36
     ce0:	8e a9       	ldd	r24, Y+54	; 0x36
     ce2:	9f a9       	ldd	r25, Y+55	; 0x37
     ce4:	9b ab       	std	Y+51, r25	; 0x33
     ce6:	8a ab       	std	Y+50, r24	; 0x32
     ce8:	8a a9       	ldd	r24, Y+50	; 0x32
     cea:	9b a9       	ldd	r25, Y+51	; 0x33
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <__stack+0x48d>
     cf0:	9b ab       	std	Y+51, r25	; 0x33
     cf2:	8a ab       	std	Y+50, r24	; 0x32
     cf4:	18 c0       	rjmp	.+48     	; 0xd26 <__stack+0x4c7>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     cf6:	fe 01       	movw	r30, r28
     cf8:	ef 5b       	subi	r30, 0xBF	; 191
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	60 81       	ld	r22, Z
     cfe:	71 81       	ldd	r23, Z+1	; 0x01
     d00:	82 81       	ldd	r24, Z+2	; 0x02
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	fe 01       	movw	r30, r28
     d0e:	e0 5c       	subi	r30, 0xC0	; 192
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	80 83       	st	Z, r24
     d14:	fe 01       	movw	r30, r28
     d16:	e0 5c       	subi	r30, 0xC0	; 192
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d1e:	89 a9       	ldd	r24, Y+49	; 0x31
     d20:	8a 95       	dec	r24
     d22:	f1 f7       	brne	.-4      	; 0xd20 <__stack+0x4c1>
     d24:	89 ab       	std	Y+49, r24	; 0x31
  _delay_us(200);

  if(GET_BIT(data,0)) {DIO_write(LCD_D4,HIGH);} else {DIO_write(LCD_D4,LOW);}
     d26:	fe 01       	movw	r30, r28
     d28:	ef 59       	subi	r30, 0x9F	; 159
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 81       	ld	r24, Z
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	81 70       	andi	r24, 0x01	; 1
     d34:	90 70       	andi	r25, 0x00	; 0
     d36:	88 23       	and	r24, r24
     d38:	29 f0       	breq	.+10     	; 0xd44 <__stack+0x4e5>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <__stack+0x4ed>
     d44:	84 e0       	ldi	r24, 0x04	; 4
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
  if(GET_BIT(data,1)) {DIO_write(LCD_D5,HIGH);} else {DIO_write(LCD_D5,LOW);}
     d4c:	fe 01       	movw	r30, r28
     d4e:	ef 59       	subi	r30, 0x9F	; 159
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 81       	ld	r24, Z
     d54:	86 95       	lsr	r24
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	81 70       	andi	r24, 0x01	; 1
     d5c:	90 70       	andi	r25, 0x00	; 0
     d5e:	88 23       	and	r24, r24
     d60:	29 f0       	breq	.+10     	; 0xd6c <__stack+0x50d>
     d62:	85 e0       	ldi	r24, 0x05	; 5
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <__stack+0x515>
     d6c:	85 e0       	ldi	r24, 0x05	; 5
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
  if(GET_BIT(data,2)) {DIO_write(LCD_D6,HIGH);} else {DIO_write(LCD_D6,LOW);}
     d74:	fe 01       	movw	r30, r28
     d76:	ef 59       	subi	r30, 0x9F	; 159
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	80 81       	ld	r24, Z
     d7c:	86 95       	lsr	r24
     d7e:	86 95       	lsr	r24
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	81 70       	andi	r24, 0x01	; 1
     d86:	90 70       	andi	r25, 0x00	; 0
     d88:	88 23       	and	r24, r24
     d8a:	29 f0       	breq	.+10     	; 0xd96 <__stack+0x537>
     d8c:	86 e0       	ldi	r24, 0x06	; 6
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <__stack+0x53f>
     d96:	86 e0       	ldi	r24, 0x06	; 6
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
  if(GET_BIT(data,3)) {DIO_write(LCD_D7,HIGH);} else {DIO_write(LCD_D7,LOW);}
     d9e:	fe 01       	movw	r30, r28
     da0:	ef 59       	subi	r30, 0x9F	; 159
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	80 81       	ld	r24, Z
     da6:	86 95       	lsr	r24
     da8:	86 95       	lsr	r24
     daa:	86 95       	lsr	r24
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	81 70       	andi	r24, 0x01	; 1
     db2:	90 70       	andi	r25, 0x00	; 0
     db4:	88 23       	and	r24, r24
     db6:	29 f0       	breq	.+10     	; 0xdc2 <__stack+0x563>
     db8:	87 e0       	ldi	r24, 0x07	; 7
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <__stack+0x56b>
     dc2:	87 e0       	ldi	r24, 0x07	; 7
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>

   DIO_write(LCD_E,HIGH);
     dca:	8b e0       	ldi	r24, 0x0B	; 11
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b1 e4       	ldi	r27, 0x41	; 65
     dda:	8d a7       	std	Y+45, r24	; 0x2d
     ddc:	9e a7       	std	Y+46, r25	; 0x2e
     dde:	af a7       	std	Y+47, r26	; 0x2f
     de0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     de2:	6d a5       	ldd	r22, Y+45	; 0x2d
     de4:	7e a5       	ldd	r23, Y+46	; 0x2e
     de6:	8f a5       	ldd	r24, Y+47	; 0x2f
     de8:	98 a9       	ldd	r25, Y+48	; 0x30
     dea:	2b ea       	ldi	r18, 0xAB	; 171
     dec:	3a ea       	ldi	r19, 0xAA	; 170
     dee:	4a ea       	ldi	r20, 0xAA	; 170
     df0:	50 e4       	ldi	r21, 0x40	; 64
     df2:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	89 a7       	std	Y+41, r24	; 0x29
     dfc:	9a a7       	std	Y+42, r25	; 0x2a
     dfe:	ab a7       	std	Y+43, r26	; 0x2b
     e00:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e02:	69 a5       	ldd	r22, Y+41	; 0x29
     e04:	7a a5       	ldd	r23, Y+42	; 0x2a
     e06:	8b a5       	ldd	r24, Y+43	; 0x2b
     e08:	9c a5       	ldd	r25, Y+44	; 0x2c
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	1c f4       	brge	.+6      	; 0xe20 <__stack+0x5c1>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	88 a7       	std	Y+40, r24	; 0x28
     e1e:	91 c0       	rjmp	.+290    	; 0xf42 <__stack+0x6e3>
	else if (__tmp > 255)
     e20:	69 a5       	ldd	r22, Y+41	; 0x29
     e22:	7a a5       	ldd	r23, Y+42	; 0x2a
     e24:	8b a5       	ldd	r24, Y+43	; 0x2b
     e26:	9c a5       	ldd	r25, Y+44	; 0x2c
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	53 e4       	ldi	r21, 0x43	; 67
     e30:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
     e34:	18 16       	cp	r1, r24
     e36:	0c f0       	brlt	.+2      	; 0xe3a <__stack+0x5db>
     e38:	7b c0       	rjmp	.+246    	; 0xf30 <__stack+0x6d1>
	{
		_delay_ms(__us / 1000.0);
     e3a:	6d a5       	ldd	r22, Y+45	; 0x2d
     e3c:	7e a5       	ldd	r23, Y+46	; 0x2e
     e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e40:	98 a9       	ldd	r25, Y+48	; 0x30
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	4a e7       	ldi	r20, 0x7A	; 122
     e48:	54 e4       	ldi	r21, 0x44	; 68
     e4a:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	8c a3       	std	Y+36, r24	; 0x24
     e54:	9d a3       	std	Y+37, r25	; 0x25
     e56:	ae a3       	std	Y+38, r26	; 0x26
     e58:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5a:	6c a1       	ldd	r22, Y+36	; 0x24
     e5c:	7d a1       	ldd	r23, Y+37	; 0x25
     e5e:	8e a1       	ldd	r24, Y+38	; 0x26
     e60:	9f a1       	ldd	r25, Y+39	; 0x27
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	4a e7       	ldi	r20, 0x7A	; 122
     e68:	55 e4       	ldi	r21, 0x45	; 69
     e6a:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	88 a3       	std	Y+32, r24	; 0x20
     e74:	99 a3       	std	Y+33, r25	; 0x21
     e76:	aa a3       	std	Y+34, r26	; 0x22
     e78:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     e7a:	68 a1       	ldd	r22, Y+32	; 0x20
     e7c:	79 a1       	ldd	r23, Y+33	; 0x21
     e7e:	8a a1       	ldd	r24, Y+34	; 0x22
     e80:	9b a1       	ldd	r25, Y+35	; 0x23
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e8       	ldi	r20, 0x80	; 128
     e88:	5f e3       	ldi	r21, 0x3F	; 63
     e8a:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
     e8e:	88 23       	and	r24, r24
     e90:	2c f4       	brge	.+10     	; 0xe9c <__stack+0x63d>
		__ticks = 1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	9f 8f       	std	Y+31, r25	; 0x1f
     e98:	8e 8f       	std	Y+30, r24	; 0x1e
     e9a:	3f c0       	rjmp	.+126    	; 0xf1a <__stack+0x6bb>
	else if (__tmp > 65535)
     e9c:	68 a1       	ldd	r22, Y+32	; 0x20
     e9e:	79 a1       	ldd	r23, Y+33	; 0x21
     ea0:	8a a1       	ldd	r24, Y+34	; 0x22
     ea2:	9b a1       	ldd	r25, Y+35	; 0x23
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	3f ef       	ldi	r19, 0xFF	; 255
     ea8:	4f e7       	ldi	r20, 0x7F	; 127
     eaa:	57 e4       	ldi	r21, 0x47	; 71
     eac:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	4c f5       	brge	.+82     	; 0xf06 <__stack+0x6a7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb4:	6c a1       	ldd	r22, Y+36	; 0x24
     eb6:	7d a1       	ldd	r23, Y+37	; 0x25
     eb8:	8e a1       	ldd	r24, Y+38	; 0x26
     eba:	9f a1       	ldd	r25, Y+39	; 0x27
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e2       	ldi	r20, 0x20	; 32
     ec2:	51 e4       	ldi	r21, 0x41	; 65
     ec4:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	bc 01       	movw	r22, r24
     ece:	cd 01       	movw	r24, r26
     ed0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	9f 8f       	std	Y+31, r25	; 0x1f
     eda:	8e 8f       	std	Y+30, r24	; 0x1e
     edc:	0f c0       	rjmp	.+30     	; 0xefc <__stack+0x69d>
     ede:	80 e9       	ldi	r24, 0x90	; 144
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	9d 8f       	std	Y+29, r25	; 0x1d
     ee4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ee8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <__stack+0x68b>
     eee:	9d 8f       	std	Y+29, r25	; 0x1d
     ef0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ef4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	9f 8f       	std	Y+31, r25	; 0x1f
     efa:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     efe:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	69 f7       	brne	.-38     	; 0xede <__stack+0x67f>
     f04:	24 c0       	rjmp	.+72     	; 0xf4e <__stack+0x6ef>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f06:	68 a1       	ldd	r22, Y+32	; 0x20
     f08:	79 a1       	ldd	r23, Y+33	; 0x21
     f0a:	8a a1       	ldd	r24, Y+34	; 0x22
     f0c:	9b a1       	ldd	r25, Y+35	; 0x23
     f0e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	9f 8f       	std	Y+31, r25	; 0x1f
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f1e:	9b 8f       	std	Y+27, r25	; 0x1b
     f20:	8a 8f       	std	Y+26, r24	; 0x1a
     f22:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f24:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <__stack+0x6c7>
     f2a:	9b 8f       	std	Y+27, r25	; 0x1b
     f2c:	8a 8f       	std	Y+26, r24	; 0x1a
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <__stack+0x6ef>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f30:	69 a5       	ldd	r22, Y+41	; 0x29
     f32:	7a a5       	ldd	r23, Y+42	; 0x2a
     f34:	8b a5       	ldd	r24, Y+43	; 0x2b
     f36:	9c a5       	ldd	r25, Y+44	; 0x2c
     f38:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	88 a7       	std	Y+40, r24	; 0x28
     f42:	88 a5       	ldd	r24, Y+40	; 0x28
     f44:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f46:	89 8d       	ldd	r24, Y+25	; 0x19
     f48:	8a 95       	dec	r24
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <__stack+0x6e9>
     f4c:	89 8f       	std	Y+25, r24	; 0x19
   _delay_us(10);
   DIO_write(LCD_E,LOW);
     f4e:	8b e0       	ldi	r24, 0x0B	; 11
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	a8 e4       	ldi	r26, 0x48	; 72
     f5c:	b3 e4       	ldi	r27, 0x43	; 67
     f5e:	8d 8b       	std	Y+21, r24	; 0x15
     f60:	9e 8b       	std	Y+22, r25	; 0x16
     f62:	af 8b       	std	Y+23, r26	; 0x17
     f64:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f66:	6d 89       	ldd	r22, Y+21	; 0x15
     f68:	7e 89       	ldd	r23, Y+22	; 0x16
     f6a:	8f 89       	ldd	r24, Y+23	; 0x17
     f6c:	98 8d       	ldd	r25, Y+24	; 0x18
     f6e:	2b ea       	ldi	r18, 0xAB	; 171
     f70:	3a ea       	ldi	r19, 0xAA	; 170
     f72:	4a ea       	ldi	r20, 0xAA	; 170
     f74:	50 e4       	ldi	r21, 0x40	; 64
     f76:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	89 8b       	std	Y+17, r24	; 0x11
     f80:	9a 8b       	std	Y+18, r25	; 0x12
     f82:	ab 8b       	std	Y+19, r26	; 0x13
     f84:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f86:	69 89       	ldd	r22, Y+17	; 0x11
     f88:	7a 89       	ldd	r23, Y+18	; 0x12
     f8a:	8b 89       	ldd	r24, Y+19	; 0x13
     f8c:	9c 89       	ldd	r25, Y+20	; 0x14
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e8       	ldi	r20, 0x80	; 128
     f94:	5f e3       	ldi	r21, 0x3F	; 63
     f96:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
     f9a:	88 23       	and	r24, r24
     f9c:	1c f4       	brge	.+6      	; 0xfa4 <__stack+0x745>
		__ticks = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	88 8b       	std	Y+16, r24	; 0x10
     fa2:	91 c0       	rjmp	.+290    	; 0x10c6 <__stack+0x867>
	else if (__tmp > 255)
     fa4:	69 89       	ldd	r22, Y+17	; 0x11
     fa6:	7a 89       	ldd	r23, Y+18	; 0x12
     fa8:	8b 89       	ldd	r24, Y+19	; 0x13
     faa:	9c 89       	ldd	r25, Y+20	; 0x14
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	4f e7       	ldi	r20, 0x7F	; 127
     fb2:	53 e4       	ldi	r21, 0x43	; 67
     fb4:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
     fb8:	18 16       	cp	r1, r24
     fba:	0c f0       	brlt	.+2      	; 0xfbe <__stack+0x75f>
     fbc:	7b c0       	rjmp	.+246    	; 0x10b4 <__stack+0x855>
	{
		_delay_ms(__us / 1000.0);
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a e7       	ldi	r20, 0x7A	; 122
     fcc:	54 e4       	ldi	r21, 0x44	; 68
     fce:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8c 87       	std	Y+12, r24	; 0x0c
     fd8:	9d 87       	std	Y+13, r25	; 0x0d
     fda:	ae 87       	std	Y+14, r26	; 0x0e
     fdc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fde:	6c 85       	ldd	r22, Y+12	; 0x0c
     fe0:	7d 85       	ldd	r23, Y+13	; 0x0d
     fe2:	8e 85       	ldd	r24, Y+14	; 0x0e
     fe4:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	4a e7       	ldi	r20, 0x7A	; 122
     fec:	55 e4       	ldi	r21, 0x45	; 69
     fee:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	88 87       	std	Y+8, r24	; 0x08
     ff8:	99 87       	std	Y+9, r25	; 0x09
     ffa:	aa 87       	std	Y+10, r26	; 0x0a
     ffc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     ffe:	68 85       	ldd	r22, Y+8	; 0x08
    1000:	79 85       	ldd	r23, Y+9	; 0x09
    1002:	8a 85       	ldd	r24, Y+10	; 0x0a
    1004:	9b 85       	ldd	r25, Y+11	; 0x0b
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1012:	88 23       	and	r24, r24
    1014:	2c f4       	brge	.+10     	; 0x1020 <__stack+0x7c1>
		__ticks = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9f 83       	std	Y+7, r25	; 0x07
    101c:	8e 83       	std	Y+6, r24	; 0x06
    101e:	3f c0       	rjmp	.+126    	; 0x109e <__stack+0x83f>
	else if (__tmp > 65535)
    1020:	68 85       	ldd	r22, Y+8	; 0x08
    1022:	79 85       	ldd	r23, Y+9	; 0x09
    1024:	8a 85       	ldd	r24, Y+10	; 0x0a
    1026:	9b 85       	ldd	r25, Y+11	; 0x0b
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	4f e7       	ldi	r20, 0x7F	; 127
    102e:	57 e4       	ldi	r21, 0x47	; 71
    1030:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1034:	18 16       	cp	r1, r24
    1036:	4c f5       	brge	.+82     	; 0x108a <__stack+0x82b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1038:	6c 85       	ldd	r22, Y+12	; 0x0c
    103a:	7d 85       	ldd	r23, Y+13	; 0x0d
    103c:	8e 85       	ldd	r24, Y+14	; 0x0e
    103e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e2       	ldi	r20, 0x20	; 32
    1046:	51 e4       	ldi	r21, 0x41	; 65
    1048:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9f 83       	std	Y+7, r25	; 0x07
    105e:	8e 83       	std	Y+6, r24	; 0x06
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <__stack+0x821>
    1062:	80 e9       	ldi	r24, 0x90	; 144
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	9d 83       	std	Y+5, r25	; 0x05
    1068:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <__stack+0x80f>
    1072:	9d 83       	std	Y+5, r25	; 0x05
    1074:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	9f 81       	ldd	r25, Y+7	; 0x07
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	9f 83       	std	Y+7, r25	; 0x07
    107e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	9f 81       	ldd	r25, Y+7	; 0x07
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	69 f7       	brne	.-38     	; 0x1062 <__stack+0x803>
    1088:	24 c0       	rjmp	.+72     	; 0x10d2 <__stack+0x873>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108a:	68 85       	ldd	r22, Y+8	; 0x08
    108c:	79 85       	ldd	r23, Y+9	; 0x09
    108e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1090:	9b 85       	ldd	r25, Y+11	; 0x0b
    1092:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9f 83       	std	Y+7, r25	; 0x07
    109c:	8e 83       	std	Y+6, r24	; 0x06
    109e:	8e 81       	ldd	r24, Y+6	; 0x06
    10a0:	9f 81       	ldd	r25, Y+7	; 0x07
    10a2:	9b 83       	std	Y+3, r25	; 0x03
    10a4:	8a 83       	std	Y+2, r24	; 0x02
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	9b 81       	ldd	r25, Y+3	; 0x03
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <__stack+0x84b>
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <__stack+0x873>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10b4:	69 89       	ldd	r22, Y+17	; 0x11
    10b6:	7a 89       	ldd	r23, Y+18	; 0x12
    10b8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ba:	9c 89       	ldd	r25, Y+20	; 0x14
    10bc:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	88 8b       	std	Y+16, r24	; 0x10
    10c6:	88 89       	ldd	r24, Y+16	; 0x10
    10c8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	8a 95       	dec	r24
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <__stack+0x86d>
    10d0:	89 83       	std	Y+1, r24	; 0x01
   _delay_us(200);
}
    10d2:	cf 59       	subi	r28, 0x9F	; 159
    10d4:	df 4f       	sbci	r29, 0xFF	; 255
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <LCD_SendCMD>:

void LCD_SendCMD(uint8 cmd){
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	c1 56       	subi	r28, 0x61	; 97
    10f8:	d0 40       	sbci	r29, 0x00	; 0
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	fe 01       	movw	r30, r28
    1106:	ef 59       	subi	r30, 0x9F	; 159
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	80 83       	st	Z, r24
	  DIO_write(LCD_Rs,LOW);
    110c:	89 e0       	ldi	r24, 0x09	; 9
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
	  DIO_write(LCD_Rw,LOW);
    1114:	8a e0       	ldi	r24, 0x0A	; 10
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>

	  if(GET_BIT(cmd,4)) {DIO_write(LCD_D4,HIGH);} else {DIO_write(LCD_D4,LOW);}
    111c:	fe 01       	movw	r30, r28
    111e:	ef 59       	subi	r30, 0x9F	; 159
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	80 81       	ld	r24, Z
    1124:	82 95       	swap	r24
    1126:	8f 70       	andi	r24, 0x0F	; 15
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	81 70       	andi	r24, 0x01	; 1
    112e:	90 70       	andi	r25, 0x00	; 0
    1130:	88 23       	and	r24, r24
    1132:	29 f0       	breq	.+10     	; 0x113e <LCD_SendCMD+0x54>
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <LCD_SendCMD+0x5c>
    113e:	84 e0       	ldi	r24, 0x04	; 4
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
	  if(GET_BIT(cmd,5)) {DIO_write(LCD_D5,HIGH);} else {DIO_write(LCD_D5,LOW);}
    1146:	fe 01       	movw	r30, r28
    1148:	ef 59       	subi	r30, 0x9F	; 159
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 81       	ld	r24, Z
    114e:	82 95       	swap	r24
    1150:	86 95       	lsr	r24
    1152:	87 70       	andi	r24, 0x07	; 7
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	90 70       	andi	r25, 0x00	; 0
    115c:	88 23       	and	r24, r24
    115e:	29 f0       	breq	.+10     	; 0x116a <LCD_SendCMD+0x80>
    1160:	85 e0       	ldi	r24, 0x05	; 5
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <LCD_SendCMD+0x88>
    116a:	85 e0       	ldi	r24, 0x05	; 5
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
	  if(GET_BIT(cmd,6)) {DIO_write(LCD_D6,HIGH);} else {DIO_write(LCD_D6,LOW);}
    1172:	fe 01       	movw	r30, r28
    1174:	ef 59       	subi	r30, 0x9F	; 159
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 81       	ld	r24, Z
    117a:	82 95       	swap	r24
    117c:	86 95       	lsr	r24
    117e:	86 95       	lsr	r24
    1180:	83 70       	andi	r24, 0x03	; 3
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	90 70       	andi	r25, 0x00	; 0
    118a:	88 23       	and	r24, r24
    118c:	29 f0       	breq	.+10     	; 0x1198 <LCD_SendCMD+0xae>
    118e:	86 e0       	ldi	r24, 0x06	; 6
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <LCD_SendCMD+0xb6>
    1198:	86 e0       	ldi	r24, 0x06	; 6
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
	  if(GET_BIT(cmd,7)) {DIO_write(LCD_D7,HIGH);} else {DIO_write(LCD_D7,LOW);}
    11a0:	fe 01       	movw	r30, r28
    11a2:	ef 59       	subi	r30, 0x9F	; 159
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 81       	ld	r24, Z
    11a8:	88 23       	and	r24, r24
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <LCD_SendCMD+0xcc>
    11ac:	87 e0       	ldi	r24, 0x07	; 7
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <LCD_SendCMD+0xd4>
    11b6:	87 e0       	ldi	r24, 0x07	; 7
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>

	  DIO_write(LCD_E,HIGH);
    11be:	8b e0       	ldi	r24, 0x0B	; 11
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    11c6:	fe 01       	movw	r30, r28
    11c8:	e3 5a       	subi	r30, 0xA3	; 163
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a0 e2       	ldi	r26, 0x20	; 32
    11d2:	b1 e4       	ldi	r27, 0x41	; 65
    11d4:	80 83       	st	Z, r24
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	a2 83       	std	Z+2, r26	; 0x02
    11da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11dc:	8e 01       	movw	r16, r28
    11de:	07 5a       	subi	r16, 0xA7	; 167
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	fe 01       	movw	r30, r28
    11e4:	e3 5a       	subi	r30, 0xA3	; 163
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	2b ea       	ldi	r18, 0xAB	; 171
    11f2:	3a ea       	ldi	r19, 0xAA	; 170
    11f4:	4a ea       	ldi	r20, 0xAA	; 170
    11f6:	50 e4       	ldi	r21, 0x40	; 64
    11f8:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	f8 01       	movw	r30, r16
    1202:	80 83       	st	Z, r24
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	a2 83       	std	Z+2, r26	; 0x02
    1208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    120a:	fe 01       	movw	r30, r28
    120c:	e7 5a       	subi	r30, 0xA7	; 167
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1224:	88 23       	and	r24, r24
    1226:	34 f4       	brge	.+12     	; 0x1234 <LCD_SendCMD+0x14a>
		__ticks = 1;
    1228:	fe 01       	movw	r30, r28
    122a:	e8 5a       	subi	r30, 0xA8	; 168
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24
    1232:	e0 c0       	rjmp	.+448    	; 0x13f4 <LCD_SendCMD+0x30a>
	else if (__tmp > 255)
    1234:	fe 01       	movw	r30, r28
    1236:	e7 5a       	subi	r30, 0xA7	; 167
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	4f e7       	ldi	r20, 0x7F	; 127
    1248:	53 e4       	ldi	r21, 0x43	; 67
    124a:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    124e:	18 16       	cp	r1, r24
    1250:	0c f0       	brlt	.+2      	; 0x1254 <LCD_SendCMD+0x16a>
    1252:	c0 c0       	rjmp	.+384    	; 0x13d4 <LCD_SendCMD+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    1254:	fe 01       	movw	r30, r28
    1256:	e3 5a       	subi	r30, 0xA3	; 163
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	60 81       	ld	r22, Z
    125c:	71 81       	ldd	r23, Z+1	; 0x01
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a e7       	ldi	r20, 0x7A	; 122
    1268:	54 e4       	ldi	r21, 0x44	; 68
    126a:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	fe 01       	movw	r30, r28
    1274:	ec 5a       	subi	r30, 0xAC	; 172
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 83       	st	Z, r24
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	a2 83       	std	Z+2, r26	; 0x02
    127e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1280:	8e 01       	movw	r16, r28
    1282:	00 5b       	subi	r16, 0xB0	; 176
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	fe 01       	movw	r30, r28
    1288:	ec 5a       	subi	r30, 0xAC	; 172
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	60 81       	ld	r22, Z
    128e:	71 81       	ldd	r23, Z+1	; 0x01
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	4a e7       	ldi	r20, 0x7A	; 122
    129a:	55 e4       	ldi	r21, 0x45	; 69
    129c:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	f8 01       	movw	r30, r16
    12a6:	80 83       	st	Z, r24
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	a2 83       	std	Z+2, r26	; 0x02
    12ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ae:	fe 01       	movw	r30, r28
    12b0:	e0 5b       	subi	r30, 0xB0	; 176
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	44 f4       	brge	.+16     	; 0x12dc <LCD_SendCMD+0x1f2>
		__ticks = 1;
    12cc:	fe 01       	movw	r30, r28
    12ce:	e2 5b       	subi	r30, 0xB2	; 178
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	91 83       	std	Z+1, r25	; 0x01
    12d8:	80 83       	st	Z, r24
    12da:	64 c0       	rjmp	.+200    	; 0x13a4 <LCD_SendCMD+0x2ba>
	else if (__tmp > 65535)
    12dc:	fe 01       	movw	r30, r28
    12de:	e0 5b       	subi	r30, 0xB0	; 176
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	0c f0       	brlt	.+2      	; 0x12fc <LCD_SendCMD+0x212>
    12fa:	43 c0       	rjmp	.+134    	; 0x1382 <LCD_SendCMD+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fc:	fe 01       	movw	r30, r28
    12fe:	ec 5a       	subi	r30, 0xAC	; 172
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	8e 01       	movw	r16, r28
    131c:	02 5b       	subi	r16, 0xB2	; 178
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	f8 01       	movw	r30, r16
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	80 83       	st	Z, r24
    1332:	1f c0       	rjmp	.+62     	; 0x1372 <LCD_SendCMD+0x288>
    1334:	fe 01       	movw	r30, r28
    1336:	e4 5b       	subi	r30, 0xB4	; 180
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	80 e9       	ldi	r24, 0x90	; 144
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1342:	fe 01       	movw	r30, r28
    1344:	e4 5b       	subi	r30, 0xB4	; 180
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <LCD_SendCMD+0x262>
    1350:	fe 01       	movw	r30, r28
    1352:	e4 5b       	subi	r30, 0xB4	; 180
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	de 01       	movw	r26, r28
    135c:	a2 5b       	subi	r26, 0xB2	; 178
    135e:	bf 4f       	sbci	r27, 0xFF	; 255
    1360:	fe 01       	movw	r30, r28
    1362:	e2 5b       	subi	r30, 0xB2	; 178
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	9c 93       	st	X, r25
    1370:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	fe 01       	movw	r30, r28
    1374:	e2 5b       	subi	r30, 0xB2	; 178
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	d1 f6       	brne	.-76     	; 0x1334 <LCD_SendCMD+0x24a>
    1380:	4b c0       	rjmp	.+150    	; 0x1418 <LCD_SendCMD+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1382:	8e 01       	movw	r16, r28
    1384:	02 5b       	subi	r16, 0xB2	; 178
    1386:	1f 4f       	sbci	r17, 0xFF	; 255
    1388:	fe 01       	movw	r30, r28
    138a:	e0 5b       	subi	r30, 0xB0	; 176
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	f8 01       	movw	r30, r16
    13a0:	91 83       	std	Z+1, r25	; 0x01
    13a2:	80 83       	st	Z, r24
    13a4:	de 01       	movw	r26, r28
    13a6:	a6 5b       	subi	r26, 0xB6	; 182
    13a8:	bf 4f       	sbci	r27, 0xFF	; 255
    13aa:	fe 01       	movw	r30, r28
    13ac:	e2 5b       	subi	r30, 0xB2	; 178
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	11 96       	adiw	r26, 0x01	; 1
    13b6:	9c 93       	st	X, r25
    13b8:	8e 93       	st	-X, r24
    13ba:	fe 01       	movw	r30, r28
    13bc:	e6 5b       	subi	r30, 0xB6	; 182
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <LCD_SendCMD+0x2da>
    13c8:	fe 01       	movw	r30, r28
    13ca:	e6 5b       	subi	r30, 0xB6	; 182
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
    13d2:	22 c0       	rjmp	.+68     	; 0x1418 <LCD_SendCMD+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13d4:	8e 01       	movw	r16, r28
    13d6:	08 5a       	subi	r16, 0xA8	; 168
    13d8:	1f 4f       	sbci	r17, 0xFF	; 255
    13da:	fe 01       	movw	r30, r28
    13dc:	e7 5a       	subi	r30, 0xA7	; 167
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	82 81       	ldd	r24, Z+2	; 0x02
    13e6:	93 81       	ldd	r25, Z+3	; 0x03
    13e8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	f8 01       	movw	r30, r16
    13f2:	80 83       	st	Z, r24
    13f4:	de 01       	movw	r26, r28
    13f6:	a7 5b       	subi	r26, 0xB7	; 183
    13f8:	bf 4f       	sbci	r27, 0xFF	; 255
    13fa:	fe 01       	movw	r30, r28
    13fc:	e8 5a       	subi	r30, 0xA8	; 168
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 81       	ld	r24, Z
    1402:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1404:	fe 01       	movw	r30, r28
    1406:	e7 5b       	subi	r30, 0xB7	; 183
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 81       	ld	r24, Z
    140c:	8a 95       	dec	r24
    140e:	f1 f7       	brne	.-4      	; 0x140c <LCD_SendCMD+0x322>
    1410:	fe 01       	movw	r30, r28
    1412:	e7 5b       	subi	r30, 0xB7	; 183
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 83       	st	Z, r24
	  _delay_us(10);
	  DIO_write(LCD_E,LOW);
    1418:	8b e0       	ldi	r24, 0x0B	; 11
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    1420:	fe 01       	movw	r30, r28
    1422:	eb 5b       	subi	r30, 0xBB	; 187
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	aa ef       	ldi	r26, 0xFA	; 250
    142c:	b4 e4       	ldi	r27, 0x44	; 68
    142e:	80 83       	st	Z, r24
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	a2 83       	std	Z+2, r26	; 0x02
    1434:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1436:	8e 01       	movw	r16, r28
    1438:	0f 5b       	subi	r16, 0xBF	; 191
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	fe 01       	movw	r30, r28
    143e:	eb 5b       	subi	r30, 0xBB	; 187
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	2b ea       	ldi	r18, 0xAB	; 171
    144c:	3a ea       	ldi	r19, 0xAA	; 170
    144e:	4a ea       	ldi	r20, 0xAA	; 170
    1450:	50 e4       	ldi	r21, 0x40	; 64
    1452:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	f8 01       	movw	r30, r16
    145c:	80 83       	st	Z, r24
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	a2 83       	std	Z+2, r26	; 0x02
    1462:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1464:	fe 01       	movw	r30, r28
    1466:	ef 5b       	subi	r30, 0xBF	; 191
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	34 f4       	brge	.+12     	; 0x148e <LCD_SendCMD+0x3a4>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	fe 01       	movw	r30, r28
    1486:	e0 5c       	subi	r30, 0xC0	; 192
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	80 83       	st	Z, r24
    148c:	9d c0       	rjmp	.+314    	; 0x15c8 <LCD_SendCMD+0x4de>
	else if (__tmp > 255)
    148e:	fe 01       	movw	r30, r28
    1490:	ef 5b       	subi	r30, 0xBF	; 191
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	53 e4       	ldi	r21, 0x43	; 67
    14a4:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <LCD_SendCMD+0x3c4>
    14ac:	7e c0       	rjmp	.+252    	; 0x15aa <LCD_SendCMD+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    14ae:	fe 01       	movw	r30, r28
    14b0:	eb 5b       	subi	r30, 0xBB	; 187
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a e7       	ldi	r20, 0x7A	; 122
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8c af       	std	Y+60, r24	; 0x3c
    14ce:	9d af       	std	Y+61, r25	; 0x3d
    14d0:	ae af       	std	Y+62, r26	; 0x3e
    14d2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    14d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    14d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    14da:	9f ad       	ldd	r25, Y+63	; 0x3f
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	4a e7       	ldi	r20, 0x7A	; 122
    14e2:	55 e4       	ldi	r21, 0x45	; 69
    14e4:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	88 af       	std	Y+56, r24	; 0x38
    14ee:	99 af       	std	Y+57, r25	; 0x39
    14f0:	aa af       	std	Y+58, r26	; 0x3a
    14f2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    14f4:	68 ad       	ldd	r22, Y+56	; 0x38
    14f6:	79 ad       	ldd	r23, Y+57	; 0x39
    14f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    14fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1508:	88 23       	and	r24, r24
    150a:	2c f4       	brge	.+10     	; 0x1516 <LCD_SendCMD+0x42c>
		__ticks = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9f ab       	std	Y+55, r25	; 0x37
    1512:	8e ab       	std	Y+54, r24	; 0x36
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <LCD_SendCMD+0x4aa>
	else if (__tmp > 65535)
    1516:	68 ad       	ldd	r22, Y+56	; 0x38
    1518:	79 ad       	ldd	r23, Y+57	; 0x39
    151a:	8a ad       	ldd	r24, Y+58	; 0x3a
    151c:	9b ad       	ldd	r25, Y+59	; 0x3b
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    152a:	18 16       	cp	r1, r24
    152c:	4c f5       	brge	.+82     	; 0x1580 <LCD_SendCMD+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1530:	7d ad       	ldd	r23, Y+61	; 0x3d
    1532:	8e ad       	ldd	r24, Y+62	; 0x3e
    1534:	9f ad       	ldd	r25, Y+63	; 0x3f
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9f ab       	std	Y+55, r25	; 0x37
    1554:	8e ab       	std	Y+54, r24	; 0x36
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <LCD_SendCMD+0x48c>
    1558:	80 e9       	ldi	r24, 0x90	; 144
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	9d ab       	std	Y+53, r25	; 0x35
    155e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1560:	8c a9       	ldd	r24, Y+52	; 0x34
    1562:	9d a9       	ldd	r25, Y+53	; 0x35
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_SendCMD+0x47a>
    1568:	9d ab       	std	Y+53, r25	; 0x35
    156a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156c:	8e a9       	ldd	r24, Y+54	; 0x36
    156e:	9f a9       	ldd	r25, Y+55	; 0x37
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	9f ab       	std	Y+55, r25	; 0x37
    1574:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1576:	8e a9       	ldd	r24, Y+54	; 0x36
    1578:	9f a9       	ldd	r25, Y+55	; 0x37
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	69 f7       	brne	.-38     	; 0x1558 <LCD_SendCMD+0x46e>
    157e:	2d c0       	rjmp	.+90     	; 0x15da <LCD_SendCMD+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1580:	68 ad       	ldd	r22, Y+56	; 0x38
    1582:	79 ad       	ldd	r23, Y+57	; 0x39
    1584:	8a ad       	ldd	r24, Y+58	; 0x3a
    1586:	9b ad       	ldd	r25, Y+59	; 0x3b
    1588:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9f ab       	std	Y+55, r25	; 0x37
    1592:	8e ab       	std	Y+54, r24	; 0x36
    1594:	8e a9       	ldd	r24, Y+54	; 0x36
    1596:	9f a9       	ldd	r25, Y+55	; 0x37
    1598:	9b ab       	std	Y+51, r25	; 0x33
    159a:	8a ab       	std	Y+50, r24	; 0x32
    159c:	8a a9       	ldd	r24, Y+50	; 0x32
    159e:	9b a9       	ldd	r25, Y+51	; 0x33
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <LCD_SendCMD+0x4b6>
    15a4:	9b ab       	std	Y+51, r25	; 0x33
    15a6:	8a ab       	std	Y+50, r24	; 0x32
    15a8:	18 c0       	rjmp	.+48     	; 0x15da <LCD_SendCMD+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15aa:	fe 01       	movw	r30, r28
    15ac:	ef 5b       	subi	r30, 0xBF	; 191
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	fe 01       	movw	r30, r28
    15c2:	e0 5c       	subi	r30, 0xC0	; 192
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 83       	st	Z, r24
    15c8:	fe 01       	movw	r30, r28
    15ca:	e0 5c       	subi	r30, 0xC0	; 192
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 81       	ld	r24, Z
    15d0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15d2:	89 a9       	ldd	r24, Y+49	; 0x31
    15d4:	8a 95       	dec	r24
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <LCD_SendCMD+0x4ea>
    15d8:	89 ab       	std	Y+49, r24	; 0x31
	  _delay_us(2000);

	  if(GET_BIT(cmd,0)) {DIO_write(LCD_D4,HIGH);} else {DIO_write(LCD_D4,LOW);}
    15da:	fe 01       	movw	r30, r28
    15dc:	ef 59       	subi	r30, 0x9F	; 159
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	80 81       	ld	r24, Z
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	88 23       	and	r24, r24
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <LCD_SendCMD+0x50e>
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <LCD_SendCMD+0x516>
    15f8:	84 e0       	ldi	r24, 0x04	; 4
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
	  if(GET_BIT(cmd,1)) {DIO_write(LCD_D5,HIGH);} else {DIO_write(LCD_D5,LOW);}
    1600:	fe 01       	movw	r30, r28
    1602:	ef 59       	subi	r30, 0x9F	; 159
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	86 95       	lsr	r24
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	90 70       	andi	r25, 0x00	; 0
    1612:	88 23       	and	r24, r24
    1614:	29 f0       	breq	.+10     	; 0x1620 <LCD_SendCMD+0x536>
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <LCD_SendCMD+0x53e>
    1620:	85 e0       	ldi	r24, 0x05	; 5
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
	  if(GET_BIT(cmd,2)) {DIO_write(LCD_D6,HIGH);} else {DIO_write(LCD_D6,LOW);}
    1628:	fe 01       	movw	r30, r28
    162a:	ef 59       	subi	r30, 0x9F	; 159
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	80 81       	ld	r24, Z
    1630:	86 95       	lsr	r24
    1632:	86 95       	lsr	r24
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	81 70       	andi	r24, 0x01	; 1
    163a:	90 70       	andi	r25, 0x00	; 0
    163c:	88 23       	and	r24, r24
    163e:	29 f0       	breq	.+10     	; 0x164a <LCD_SendCMD+0x560>
    1640:	86 e0       	ldi	r24, 0x06	; 6
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <LCD_SendCMD+0x568>
    164a:	86 e0       	ldi	r24, 0x06	; 6
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
	  if(GET_BIT(cmd,3)) {DIO_write(LCD_D7,HIGH);} else {DIO_write(LCD_D7,LOW);}
    1652:	fe 01       	movw	r30, r28
    1654:	ef 59       	subi	r30, 0x9F	; 159
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	80 81       	ld	r24, Z
    165a:	86 95       	lsr	r24
    165c:	86 95       	lsr	r24
    165e:	86 95       	lsr	r24
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	90 70       	andi	r25, 0x00	; 0
    1668:	88 23       	and	r24, r24
    166a:	29 f0       	breq	.+10     	; 0x1676 <LCD_SendCMD+0x58c>
    166c:	87 e0       	ldi	r24, 0x07	; 7
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    1674:	04 c0       	rjmp	.+8      	; 0x167e <LCD_SendCMD+0x594>
    1676:	87 e0       	ldi	r24, 0x07	; 7
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>

	   DIO_write(LCD_E,HIGH);
    167e:	8b e0       	ldi	r24, 0x0B	; 11
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e2       	ldi	r26, 0x20	; 32
    168c:	b1 e4       	ldi	r27, 0x41	; 65
    168e:	8d a7       	std	Y+45, r24	; 0x2d
    1690:	9e a7       	std	Y+46, r25	; 0x2e
    1692:	af a7       	std	Y+47, r26	; 0x2f
    1694:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1696:	6d a5       	ldd	r22, Y+45	; 0x2d
    1698:	7e a5       	ldd	r23, Y+46	; 0x2e
    169a:	8f a5       	ldd	r24, Y+47	; 0x2f
    169c:	98 a9       	ldd	r25, Y+48	; 0x30
    169e:	2b ea       	ldi	r18, 0xAB	; 171
    16a0:	3a ea       	ldi	r19, 0xAA	; 170
    16a2:	4a ea       	ldi	r20, 0xAA	; 170
    16a4:	50 e4       	ldi	r21, 0x40	; 64
    16a6:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	89 a7       	std	Y+41, r24	; 0x29
    16b0:	9a a7       	std	Y+42, r25	; 0x2a
    16b2:	ab a7       	std	Y+43, r26	; 0x2b
    16b4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    16b6:	69 a5       	ldd	r22, Y+41	; 0x29
    16b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    16ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    16bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	1c f4       	brge	.+6      	; 0x16d4 <LCD_SendCMD+0x5ea>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	88 a7       	std	Y+40, r24	; 0x28
    16d2:	91 c0       	rjmp	.+290    	; 0x17f6 <LCD_SendCMD+0x70c>
	else if (__tmp > 255)
    16d4:	69 a5       	ldd	r22, Y+41	; 0x29
    16d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    16d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16da:	9c a5       	ldd	r25, Y+44	; 0x2c
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	53 e4       	ldi	r21, 0x43	; 67
    16e4:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	0c f0       	brlt	.+2      	; 0x16ee <LCD_SendCMD+0x604>
    16ec:	7b c0       	rjmp	.+246    	; 0x17e4 <LCD_SendCMD+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    16ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    16f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    16f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f4:	98 a9       	ldd	r25, Y+48	; 0x30
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	4a e7       	ldi	r20, 0x7A	; 122
    16fc:	54 e4       	ldi	r21, 0x44	; 68
    16fe:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	8c a3       	std	Y+36, r24	; 0x24
    1708:	9d a3       	std	Y+37, r25	; 0x25
    170a:	ae a3       	std	Y+38, r26	; 0x26
    170c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170e:	6c a1       	ldd	r22, Y+36	; 0x24
    1710:	7d a1       	ldd	r23, Y+37	; 0x25
    1712:	8e a1       	ldd	r24, Y+38	; 0x26
    1714:	9f a1       	ldd	r25, Y+39	; 0x27
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a e7       	ldi	r20, 0x7A	; 122
    171c:	55 e4       	ldi	r21, 0x45	; 69
    171e:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	88 a3       	std	Y+32, r24	; 0x20
    1728:	99 a3       	std	Y+33, r25	; 0x21
    172a:	aa a3       	std	Y+34, r26	; 0x22
    172c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    172e:	68 a1       	ldd	r22, Y+32	; 0x20
    1730:	79 a1       	ldd	r23, Y+33	; 0x21
    1732:	8a a1       	ldd	r24, Y+34	; 0x22
    1734:	9b a1       	ldd	r25, Y+35	; 0x23
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <LCD_SendCMD+0x666>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9f 8f       	std	Y+31, r25	; 0x1f
    174c:	8e 8f       	std	Y+30, r24	; 0x1e
    174e:	3f c0       	rjmp	.+126    	; 0x17ce <LCD_SendCMD+0x6e4>
	else if (__tmp > 65535)
    1750:	68 a1       	ldd	r22, Y+32	; 0x20
    1752:	79 a1       	ldd	r23, Y+33	; 0x21
    1754:	8a a1       	ldd	r24, Y+34	; 0x22
    1756:	9b a1       	ldd	r25, Y+35	; 0x23
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	4c f5       	brge	.+82     	; 0x17ba <LCD_SendCMD+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1768:	6c a1       	ldd	r22, Y+36	; 0x24
    176a:	7d a1       	ldd	r23, Y+37	; 0x25
    176c:	8e a1       	ldd	r24, Y+38	; 0x26
    176e:	9f a1       	ldd	r25, Y+39	; 0x27
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9f 8f       	std	Y+31, r25	; 0x1f
    178e:	8e 8f       	std	Y+30, r24	; 0x1e
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <LCD_SendCMD+0x6c6>
    1792:	80 e9       	ldi	r24, 0x90	; 144
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	9d 8f       	std	Y+29, r25	; 0x1d
    1798:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    179c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <LCD_SendCMD+0x6b4>
    17a2:	9d 8f       	std	Y+29, r25	; 0x1d
    17a4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	9f 8f       	std	Y+31, r25	; 0x1f
    17ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	69 f7       	brne	.-38     	; 0x1792 <LCD_SendCMD+0x6a8>
    17b8:	24 c0       	rjmp	.+72     	; 0x1802 <LCD_SendCMD+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	68 a1       	ldd	r22, Y+32	; 0x20
    17bc:	79 a1       	ldd	r23, Y+33	; 0x21
    17be:	8a a1       	ldd	r24, Y+34	; 0x22
    17c0:	9b a1       	ldd	r25, Y+35	; 0x23
    17c2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9f 8f       	std	Y+31, r25	; 0x1f
    17cc:	8e 8f       	std	Y+30, r24	; 0x1e
    17ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17d2:	9b 8f       	std	Y+27, r25	; 0x1b
    17d4:	8a 8f       	std	Y+26, r24	; 0x1a
    17d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_SendCMD+0x6f0>
    17de:	9b 8f       	std	Y+27, r25	; 0x1b
    17e0:	8a 8f       	std	Y+26, r24	; 0x1a
    17e2:	0f c0       	rjmp	.+30     	; 0x1802 <LCD_SendCMD+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17e4:	69 a5       	ldd	r22, Y+41	; 0x29
    17e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    17e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ec:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	88 a7       	std	Y+40, r24	; 0x28
    17f6:	88 a5       	ldd	r24, Y+40	; 0x28
    17f8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17fa:	89 8d       	ldd	r24, Y+25	; 0x19
    17fc:	8a 95       	dec	r24
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCD_SendCMD+0x712>
    1800:	89 8f       	std	Y+25, r24	; 0x19
	   _delay_us(10);
	   DIO_write(LCD_E,LOW);
    1802:	8b e0       	ldi	r24, 0x0B	; 11
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_write>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	aa ef       	ldi	r26, 0xFA	; 250
    1810:	b4 e4       	ldi	r27, 0x44	; 68
    1812:	8d 8b       	std	Y+21, r24	; 0x15
    1814:	9e 8b       	std	Y+22, r25	; 0x16
    1816:	af 8b       	std	Y+23, r26	; 0x17
    1818:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    181a:	6d 89       	ldd	r22, Y+21	; 0x15
    181c:	7e 89       	ldd	r23, Y+22	; 0x16
    181e:	8f 89       	ldd	r24, Y+23	; 0x17
    1820:	98 8d       	ldd	r25, Y+24	; 0x18
    1822:	2b ea       	ldi	r18, 0xAB	; 171
    1824:	3a ea       	ldi	r19, 0xAA	; 170
    1826:	4a ea       	ldi	r20, 0xAA	; 170
    1828:	50 e4       	ldi	r21, 0x40	; 64
    182a:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	89 8b       	std	Y+17, r24	; 0x11
    1834:	9a 8b       	std	Y+18, r25	; 0x12
    1836:	ab 8b       	std	Y+19, r26	; 0x13
    1838:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    183a:	69 89       	ldd	r22, Y+17	; 0x11
    183c:	7a 89       	ldd	r23, Y+18	; 0x12
    183e:	8b 89       	ldd	r24, Y+19	; 0x13
    1840:	9c 89       	ldd	r25, Y+20	; 0x14
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	1c f4       	brge	.+6      	; 0x1858 <LCD_SendCMD+0x76e>
		__ticks = 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	88 8b       	std	Y+16, r24	; 0x10
    1856:	91 c0       	rjmp	.+290    	; 0x197a <LCD_SendCMD+0x890>
	else if (__tmp > 255)
    1858:	69 89       	ldd	r22, Y+17	; 0x11
    185a:	7a 89       	ldd	r23, Y+18	; 0x12
    185c:	8b 89       	ldd	r24, Y+19	; 0x13
    185e:	9c 89       	ldd	r25, Y+20	; 0x14
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	53 e4       	ldi	r21, 0x43	; 67
    1868:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	0c f0       	brlt	.+2      	; 0x1872 <LCD_SendCMD+0x788>
    1870:	7b c0       	rjmp	.+246    	; 0x1968 <LCD_SendCMD+0x87e>
	{
		_delay_ms(__us / 1000.0);
    1872:	6d 89       	ldd	r22, Y+21	; 0x15
    1874:	7e 89       	ldd	r23, Y+22	; 0x16
    1876:	8f 89       	ldd	r24, Y+23	; 0x17
    1878:	98 8d       	ldd	r25, Y+24	; 0x18
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4a e7       	ldi	r20, 0x7A	; 122
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8c 87       	std	Y+12, r24	; 0x0c
    188c:	9d 87       	std	Y+13, r25	; 0x0d
    188e:	ae 87       	std	Y+14, r26	; 0x0e
    1890:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6c 85       	ldd	r22, Y+12	; 0x0c
    1894:	7d 85       	ldd	r23, Y+13	; 0x0d
    1896:	8e 85       	ldd	r24, Y+14	; 0x0e
    1898:	9f 85       	ldd	r25, Y+15	; 0x0f
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a e7       	ldi	r20, 0x7A	; 122
    18a0:	55 e4       	ldi	r21, 0x45	; 69
    18a2:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	88 87       	std	Y+8, r24	; 0x08
    18ac:	99 87       	std	Y+9, r25	; 0x09
    18ae:	aa 87       	std	Y+10, r26	; 0x0a
    18b0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18b2:	68 85       	ldd	r22, Y+8	; 0x08
    18b4:	79 85       	ldd	r23, Y+9	; 0x09
    18b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <LCD_SendCMD+0x7ea>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9f 83       	std	Y+7, r25	; 0x07
    18d0:	8e 83       	std	Y+6, r24	; 0x06
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <LCD_SendCMD+0x868>
	else if (__tmp > 65535)
    18d4:	68 85       	ldd	r22, Y+8	; 0x08
    18d6:	79 85       	ldd	r23, Y+9	; 0x09
    18d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18da:	9b 85       	ldd	r25, Y+11	; 0x0b
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <LCD_SendCMD+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    18f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    18f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9f 83       	std	Y+7, r25	; 0x07
    1912:	8e 83       	std	Y+6, r24	; 0x06
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <LCD_SendCMD+0x84a>
    1916:	80 e9       	ldi	r24, 0x90	; 144
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	9d 83       	std	Y+5, r25	; 0x05
    191c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191e:	8c 81       	ldd	r24, Y+4	; 0x04
    1920:	9d 81       	ldd	r25, Y+5	; 0x05
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_SendCMD+0x838>
    1926:	9d 83       	std	Y+5, r25	; 0x05
    1928:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8e 81       	ldd	r24, Y+6	; 0x06
    192c:	9f 81       	ldd	r25, Y+7	; 0x07
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9f 83       	std	Y+7, r25	; 0x07
    1932:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8e 81       	ldd	r24, Y+6	; 0x06
    1936:	9f 81       	ldd	r25, Y+7	; 0x07
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <LCD_SendCMD+0x82c>
    193c:	24 c0       	rjmp	.+72     	; 0x1986 <LCD_SendCMD+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	68 85       	ldd	r22, Y+8	; 0x08
    1940:	79 85       	ldd	r23, Y+9	; 0x09
    1942:	8a 85       	ldd	r24, Y+10	; 0x0a
    1944:	9b 85       	ldd	r25, Y+11	; 0x0b
    1946:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9f 83       	std	Y+7, r25	; 0x07
    1950:	8e 83       	std	Y+6, r24	; 0x06
    1952:	8e 81       	ldd	r24, Y+6	; 0x06
    1954:	9f 81       	ldd	r25, Y+7	; 0x07
    1956:	9b 83       	std	Y+3, r25	; 0x03
    1958:	8a 83       	std	Y+2, r24	; 0x02
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_SendCMD+0x874>
    1962:	9b 83       	std	Y+3, r25	; 0x03
    1964:	8a 83       	std	Y+2, r24	; 0x02
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <LCD_SendCMD+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1968:	69 89       	ldd	r22, Y+17	; 0x11
    196a:	7a 89       	ldd	r23, Y+18	; 0x12
    196c:	8b 89       	ldd	r24, Y+19	; 0x13
    196e:	9c 89       	ldd	r25, Y+20	; 0x14
    1970:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	88 8b       	std	Y+16, r24	; 0x10
    197a:	88 89       	ldd	r24, Y+16	; 0x10
    197c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	8a 95       	dec	r24
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_SendCMD+0x896>
    1984:	89 83       	std	Y+1, r24	; 0x01
	   _delay_us(2000);
}
    1986:	cf 59       	subi	r28, 0x9F	; 159
    1988:	df 4f       	sbci	r29, 0xFF	; 255
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	08 95       	ret

0000199e <LCD_SendString>:

void LCD_SendString(char* string){
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <LCD_SendString+0x6>
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <LCD_SendString+0x8>
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03

	int i=0;
    19ae:	1a 82       	std	Y+2, r1	; 0x02
    19b0:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;string[i]!=0;i++)
    19b2:	1a 82       	std	Y+2, r1	; 0x02
    19b4:	19 82       	std	Y+1, r1	; 0x01
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <LCD_SendString+0x38>
	{
		LCD_SendChar(string[i]);
    19b8:	29 81       	ldd	r18, Y+1	; 0x01
    19ba:	3a 81       	ldd	r19, Y+2	; 0x02
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	fc 01       	movw	r30, r24
    19c2:	e2 0f       	add	r30, r18
    19c4:	f3 1f       	adc	r31, r19
    19c6:	80 81       	ld	r24, Z
    19c8:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_SendChar>
}

void LCD_SendString(char* string){

	int i=0;
	for(i=0;string[i]!=0;i++)
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	29 81       	ldd	r18, Y+1	; 0x01
    19d8:	3a 81       	ldd	r19, Y+2	; 0x02
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	fc 01       	movw	r30, r24
    19e0:	e2 0f       	add	r30, r18
    19e2:	f3 1f       	adc	r31, r19
    19e4:	80 81       	ld	r24, Z
    19e6:	88 23       	and	r24, r24
    19e8:	39 f7       	brne	.-50     	; 0x19b8 <LCD_SendString+0x1a>
	{
		LCD_SendChar(string[i]);
	}


}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <main>:
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	e4 97       	sbiw	r28, 0x34	; 52
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_init>
    1a10:	0e 94 84 03 	call	0x708	; 0x708 <LCD_init>
    1a14:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_init>
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a0 e0       	ldi	r26, 0x00	; 0
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	8d 8f       	std	Y+29, r24	; 0x1d
    1a22:	9e 8f       	std	Y+30, r25	; 0x1e
    1a24:	af 8f       	std	Y+31, r26	; 0x1f
    1a26:	b8 a3       	std	Y+32, r27	; 0x20
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a0 e0       	ldi	r26, 0x00	; 0
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	89 8f       	std	Y+25, r24	; 0x19
    1a32:	9a 8f       	std	Y+26, r25	; 0x1a
    1a34:	ab 8f       	std	Y+27, r26	; 0x1b
    1a36:	bc 8f       	std	Y+28, r27	; 0x1c
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	8d 8b       	std	Y+21, r24	; 0x15
    1a42:	9e 8b       	std	Y+22, r25	; 0x16
    1a44:	af 8b       	std	Y+23, r26	; 0x17
    1a46:	b8 8f       	std	Y+24, r27	; 0x18
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e0       	ldi	r26, 0x00	; 0
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	89 8b       	std	Y+17, r24	; 0x11
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	ab 8b       	std	Y+19, r26	; 0x13
    1a56:	bc 8b       	std	Y+20, r27	; 0x14
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <ADC_read>
    1a5e:	cc 01       	movw	r24, r24
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__floatunsisf>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	2d ec       	ldi	r18, 0xCD	; 205
    1a76:	3c ec       	ldi	r19, 0xCC	; 204
    1a78:	4c e4       	ldi	r20, 0x4C	; 76
    1a7a:	53 e4       	ldi	r21, 0x43	; 67
    1a7c:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	8d 8f       	std	Y+29, r24	; 0x1d
    1a86:	9e 8f       	std	Y+30, r25	; 0x1e
    1a88:	af 8f       	std	Y+31, r26	; 0x1f
    1a8a:	b8 a3       	std	Y+32, r27	; 0x20
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <ADC_read>
    1a92:	cc 01       	movw	r24, r24
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__floatunsisf>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	2d ec       	ldi	r18, 0xCD	; 205
    1aaa:	3c ec       	ldi	r19, 0xCC	; 204
    1aac:	4c e4       	ldi	r20, 0x4C	; 76
    1aae:	53 e4       	ldi	r21, 0x43	; 67
    1ab0:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	89 8f       	std	Y+25, r24	; 0x19
    1aba:	9a 8f       	std	Y+26, r25	; 0x1a
    1abc:	ab 8f       	std	Y+27, r26	; 0x1b
    1abe:	bc 8f       	std	Y+28, r27	; 0x1c
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <ADC_read>
    1ac6:	cc 01       	movw	r24, r24
    1ac8:	a0 e0       	ldi	r26, 0x00	; 0
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__floatunsisf>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	2d ec       	ldi	r18, 0xCD	; 205
    1ade:	3c ec       	ldi	r19, 0xCC	; 204
    1ae0:	4c e4       	ldi	r20, 0x4C	; 76
    1ae2:	53 e4       	ldi	r21, 0x43	; 67
    1ae4:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8d 8b       	std	Y+21, r24	; 0x15
    1aee:	9e 8b       	std	Y+22, r25	; 0x16
    1af0:	af 8b       	std	Y+23, r26	; 0x17
    1af2:	b8 8f       	std	Y+24, r27	; 0x18
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <ADC_read>
    1afa:	cc 01       	movw	r24, r24
    1afc:	a0 e0       	ldi	r26, 0x00	; 0
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__floatunsisf>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	2d ec       	ldi	r18, 0xCD	; 205
    1b12:	3c ec       	ldi	r19, 0xCC	; 204
    1b14:	4c e4       	ldi	r20, 0x4C	; 76
    1b16:	53 e4       	ldi	r21, 0x43	; 67
    1b18:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	89 8b       	std	Y+17, r24	; 0x11
    1b22:	9a 8b       	std	Y+18, r25	; 0x12
    1b24:	ab 8b       	std	Y+19, r26	; 0x13
    1b26:	bc 8b       	std	Y+20, r27	; 0x14
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	ac e8       	ldi	r26, 0x8C	; 140
    1b2e:	b2 e4       	ldi	r27, 0x42	; 66
    1b30:	8d 87       	std	Y+13, r24	; 0x0d
    1b32:	9e 87       	std	Y+14, r25	; 0x0e
    1b34:	af 87       	std	Y+15, r26	; 0x0f
    1b36:	b8 8b       	std	Y+16, r27	; 0x10
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a4 e9       	ldi	r26, 0x94	; 148
    1b3e:	b3 e4       	ldi	r27, 0x43	; 67
    1b40:	89 87       	std	Y+9, r24	; 0x09
    1b42:	9a 87       	std	Y+10, r25	; 0x0a
    1b44:	ab 87       	std	Y+11, r26	; 0x0b
    1b46:	bc 87       	std	Y+12, r27	; 0x0c
    1b48:	83 e3       	ldi	r24, 0x33	; 51
    1b4a:	93 e3       	ldi	r25, 0x33	; 51
    1b4c:	a5 e2       	ldi	r26, 0x25	; 37
    1b4e:	b2 e4       	ldi	r27, 0x42	; 66
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	af 83       	std	Y+7, r26	; 0x07
    1b56:	b8 87       	std	Y+8, r27	; 0x08
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	ac e5       	ldi	r26, 0x5C	; 92
    1b5e:	b2 e4       	ldi	r27, 0x42	; 66
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	ab 83       	std	Y+3, r26	; 0x03
    1b66:	bc 83       	std	Y+4, r27	; 0x04
    1b68:	1c aa       	std	Y+52, r1	; 0x34
    1b6a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b6c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b70:	98 a1       	ldd	r25, Y+32	; 0x20
    1b72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b74:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b76:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b78:	58 89       	ldd	r21, Y+16	; 0x10
    1b7a:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	14 f4       	brge	.+4      	; 0x1b86 <main+0x18e>
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	8c ab       	std	Y+52, r24	; 0x34
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8a:	89 27       	eor	r24, r25
    1b8c:	88 23       	and	r24, r24
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <main+0x19a>
    1b90:	41 c0       	rjmp	.+130    	; 0x1c14 <main+0x21c>
    1b92:	1b aa       	std	Y+51, r1	; 0x33
    1b94:	69 8d       	ldd	r22, Y+25	; 0x19
    1b96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9c:	29 85       	ldd	r18, Y+9	; 0x09
    1b9e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ba0:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ba2:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ba4:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	14 f4       	brge	.+4      	; 0x1bb0 <main+0x1b8>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	8b ab       	std	Y+51, r24	; 0x33
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	9b a9       	ldd	r25, Y+51	; 0x33
    1bb4:	89 27       	eor	r24, r25
    1bb6:	88 23       	and	r24, r24
    1bb8:	69 f5       	brne	.+90     	; 0x1c14 <main+0x21c>
    1bba:	1a aa       	std	Y+50, r1	; 0x32
    1bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc4:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc6:	3e 81       	ldd	r19, Y+6	; 0x06
    1bc8:	4f 81       	ldd	r20, Y+7	; 0x07
    1bca:	58 85       	ldd	r21, Y+8	; 0x08
    1bcc:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	14 f4       	brge	.+4      	; 0x1bd8 <main+0x1e0>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	8a ab       	std	Y+50, r24	; 0x32
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	9a a9       	ldd	r25, Y+50	; 0x32
    1bdc:	89 27       	eor	r24, r25
    1bde:	88 23       	and	r24, r24
    1be0:	c9 f4       	brne	.+50     	; 0x1c14 <main+0x21c>
    1be2:	19 aa       	std	Y+49, r1	; 0x31
    1be4:	69 89       	ldd	r22, Y+17	; 0x11
    1be6:	7a 89       	ldd	r23, Y+18	; 0x12
    1be8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bea:	9c 89       	ldd	r25, Y+20	; 0x14
    1bec:	29 81       	ldd	r18, Y+1	; 0x01
    1bee:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf0:	4b 81       	ldd	r20, Y+3	; 0x03
    1bf2:	5c 81       	ldd	r21, Y+4	; 0x04
    1bf4:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1bf8:	18 16       	cp	r1, r24
    1bfa:	14 f4       	brge	.+4      	; 0x1c00 <main+0x208>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	89 ab       	std	Y+49, r24	; 0x31
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	99 a9       	ldd	r25, Y+49	; 0x31
    1c04:	89 27       	eor	r24, r25
    1c06:	88 23       	and	r24, r24
    1c08:	29 f4       	brne	.+10     	; 0x1c14 <main+0x21c>
    1c0a:	80 ec       	ldi	r24, 0xC0	; 192
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_SendString>
    1c12:	5c c1       	rjmp	.+696    	; 0x1ecc <main+0x4d4>
    1c14:	18 aa       	std	Y+48, r1	; 0x30
    1c16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c1e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c20:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c22:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c24:	58 89       	ldd	r21, Y+16	; 0x10
    1c26:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	14 f4       	brge	.+4      	; 0x1c32 <main+0x23a>
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	88 ab       	std	Y+48, r24	; 0x30
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	98 a9       	ldd	r25, Y+48	; 0x30
    1c36:	89 27       	eor	r24, r25
    1c38:	88 23       	and	r24, r24
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <main+0x246>
    1c3c:	41 c0       	rjmp	.+130    	; 0x1cc0 <main+0x2c8>
    1c3e:	1f a6       	std	Y+47, r1	; 0x2f
    1c40:	69 8d       	ldd	r22, Y+25	; 0x19
    1c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c48:	29 85       	ldd	r18, Y+9	; 0x09
    1c4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c4c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c4e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c50:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	14 f4       	brge	.+4      	; 0x1c5c <main+0x264>
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	8f a7       	std	Y+47, r24	; 0x2f
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	9f a5       	ldd	r25, Y+47	; 0x2f
    1c60:	89 27       	eor	r24, r25
    1c62:	88 23       	and	r24, r24
    1c64:	69 f5       	brne	.+90     	; 0x1cc0 <main+0x2c8>
    1c66:	1e a6       	std	Y+46, r1	; 0x2e
    1c68:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c70:	2d 81       	ldd	r18, Y+5	; 0x05
    1c72:	3e 81       	ldd	r19, Y+6	; 0x06
    1c74:	4f 81       	ldd	r20, Y+7	; 0x07
    1c76:	58 85       	ldd	r21, Y+8	; 0x08
    1c78:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	14 f4       	brge	.+4      	; 0x1c84 <main+0x28c>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	8e a7       	std	Y+46, r24	; 0x2e
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c88:	89 27       	eor	r24, r25
    1c8a:	88 23       	and	r24, r24
    1c8c:	c9 f4       	brne	.+50     	; 0x1cc0 <main+0x2c8>
    1c8e:	1d a6       	std	Y+45, r1	; 0x2d
    1c90:	69 89       	ldd	r22, Y+17	; 0x11
    1c92:	7a 89       	ldd	r23, Y+18	; 0x12
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	9c 89       	ldd	r25, Y+20	; 0x14
    1c98:	29 81       	ldd	r18, Y+1	; 0x01
    1c9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c9c:	4b 81       	ldd	r20, Y+3	; 0x03
    1c9e:	5c 81       	ldd	r21, Y+4	; 0x04
    1ca0:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1ca4:	88 23       	and	r24, r24
    1ca6:	14 f4       	brge	.+4      	; 0x1cac <main+0x2b4>
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	8d a7       	std	Y+45, r24	; 0x2d
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cb0:	89 27       	eor	r24, r25
    1cb2:	88 23       	and	r24, r24
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <main+0x2c8>
    1cb6:	87 ec       	ldi	r24, 0xC7	; 199
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_SendString>
    1cbe:	06 c1       	rjmp	.+524    	; 0x1ecc <main+0x4d4>
    1cc0:	1c a6       	std	Y+44, r1	; 0x2c
    1cc2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cc4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1cc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cc8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cca:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ccc:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cce:	4f 85       	ldd	r20, Y+15	; 0x0f
    1cd0:	58 89       	ldd	r21, Y+16	; 0x10
    1cd2:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	14 f4       	brge	.+4      	; 0x1cde <main+0x2e6>
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	8c a7       	std	Y+44, r24	; 0x2c
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce2:	89 27       	eor	r24, r25
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <main+0x2f2>
    1ce8:	41 c0       	rjmp	.+130    	; 0x1d6c <main+0x374>
    1cea:	1b a6       	std	Y+43, r1	; 0x2b
    1cec:	69 8d       	ldd	r22, Y+25	; 0x19
    1cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf4:	29 85       	ldd	r18, Y+9	; 0x09
    1cf6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cf8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cfa:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cfc:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	14 f4       	brge	.+4      	; 0x1d08 <main+0x310>
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	8b a7       	std	Y+43, r24	; 0x2b
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d0c:	89 27       	eor	r24, r25
    1d0e:	88 23       	and	r24, r24
    1d10:	69 f5       	brne	.+90     	; 0x1d6c <main+0x374>
    1d12:	1a a6       	std	Y+42, r1	; 0x2a
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d20:	4f 81       	ldd	r20, Y+7	; 0x07
    1d22:	58 85       	ldd	r21, Y+8	; 0x08
    1d24:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	14 f4       	brge	.+4      	; 0x1d30 <main+0x338>
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	8a a7       	std	Y+42, r24	; 0x2a
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d34:	89 27       	eor	r24, r25
    1d36:	88 23       	and	r24, r24
    1d38:	c9 f4       	brne	.+50     	; 0x1d6c <main+0x374>
    1d3a:	19 a6       	std	Y+41, r1	; 0x29
    1d3c:	69 89       	ldd	r22, Y+17	; 0x11
    1d3e:	7a 89       	ldd	r23, Y+18	; 0x12
    1d40:	8b 89       	ldd	r24, Y+19	; 0x13
    1d42:	9c 89       	ldd	r25, Y+20	; 0x14
    1d44:	29 81       	ldd	r18, Y+1	; 0x01
    1d46:	3a 81       	ldd	r19, Y+2	; 0x02
    1d48:	4b 81       	ldd	r20, Y+3	; 0x03
    1d4a:	5c 81       	ldd	r21, Y+4	; 0x04
    1d4c:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	14 f4       	brge	.+4      	; 0x1d58 <main+0x360>
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	89 a7       	std	Y+41, r24	; 0x29
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	99 a5       	ldd	r25, Y+41	; 0x29
    1d5c:	89 27       	eor	r24, r25
    1d5e:	88 23       	and	r24, r24
    1d60:	29 f4       	brne	.+10     	; 0x1d6c <main+0x374>
    1d62:	83 ed       	ldi	r24, 0xD3	; 211
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_SendString>
    1d6a:	b0 c0       	rjmp	.+352    	; 0x1ecc <main+0x4d4>
    1d6c:	18 a6       	std	Y+40, r1	; 0x28
    1d6e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d70:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d74:	98 a1       	ldd	r25, Y+32	; 0x20
    1d76:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d78:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d7a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d7c:	58 89       	ldd	r21, Y+16	; 0x10
    1d7e:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	14 f4       	brge	.+4      	; 0x1d8a <main+0x392>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	88 a7       	std	Y+40, r24	; 0x28
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	98 a5       	ldd	r25, Y+40	; 0x28
    1d8e:	89 27       	eor	r24, r25
    1d90:	88 23       	and	r24, r24
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <main+0x39e>
    1d94:	41 c0       	rjmp	.+130    	; 0x1e18 <main+0x420>
    1d96:	1f a2       	std	Y+39, r1	; 0x27
    1d98:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da0:	29 85       	ldd	r18, Y+9	; 0x09
    1da2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1da4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1da6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1da8:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	14 f4       	brge	.+4      	; 0x1db4 <main+0x3bc>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	8f a3       	std	Y+39, r24	; 0x27
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	9f a1       	ldd	r25, Y+39	; 0x27
    1db8:	89 27       	eor	r24, r25
    1dba:	88 23       	and	r24, r24
    1dbc:	69 f5       	brne	.+90     	; 0x1e18 <main+0x420>
    1dbe:	1e a2       	std	Y+38, r1	; 0x26
    1dc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc8:	2d 81       	ldd	r18, Y+5	; 0x05
    1dca:	3e 81       	ldd	r19, Y+6	; 0x06
    1dcc:	4f 81       	ldd	r20, Y+7	; 0x07
    1dce:	58 85       	ldd	r21, Y+8	; 0x08
    1dd0:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1dd4:	18 16       	cp	r1, r24
    1dd6:	14 f4       	brge	.+4      	; 0x1ddc <main+0x3e4>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	8e a3       	std	Y+38, r24	; 0x26
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	9e a1       	ldd	r25, Y+38	; 0x26
    1de0:	89 27       	eor	r24, r25
    1de2:	88 23       	and	r24, r24
    1de4:	c9 f4       	brne	.+50     	; 0x1e18 <main+0x420>
    1de6:	1d a2       	std	Y+37, r1	; 0x25
    1de8:	69 89       	ldd	r22, Y+17	; 0x11
    1dea:	7a 89       	ldd	r23, Y+18	; 0x12
    1dec:	8b 89       	ldd	r24, Y+19	; 0x13
    1dee:	9c 89       	ldd	r25, Y+20	; 0x14
    1df0:	29 81       	ldd	r18, Y+1	; 0x01
    1df2:	3a 81       	ldd	r19, Y+2	; 0x02
    1df4:	4b 81       	ldd	r20, Y+3	; 0x03
    1df6:	5c 81       	ldd	r21, Y+4	; 0x04
    1df8:	0e 94 ed 12 	call	0x25da	; 0x25da <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	14 f4       	brge	.+4      	; 0x1e04 <main+0x40c>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	8d a3       	std	Y+37, r24	; 0x25
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	9d a1       	ldd	r25, Y+37	; 0x25
    1e08:	89 27       	eor	r24, r25
    1e0a:	88 23       	and	r24, r24
    1e0c:	29 f4       	brne	.+10     	; 0x1e18 <main+0x420>
    1e0e:	81 ee       	ldi	r24, 0xE1	; 225
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_SendString>
    1e16:	5a c0       	rjmp	.+180    	; 0x1ecc <main+0x4d4>
    1e18:	1c a2       	std	Y+36, r1	; 0x24
    1e1a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e1c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e20:	98 a1       	ldd	r25, Y+32	; 0x20
    1e22:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e24:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e26:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e28:	58 89       	ldd	r21, Y+16	; 0x10
    1e2a:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	14 f4       	brge	.+4      	; 0x1e36 <main+0x43e>
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	8c a3       	std	Y+36, r24	; 0x24
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	9c a1       	ldd	r25, Y+36	; 0x24
    1e3a:	89 27       	eor	r24, r25
    1e3c:	88 23       	and	r24, r24
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <main+0x44a>
    1e40:	41 c0       	rjmp	.+130    	; 0x1ec4 <main+0x4cc>
    1e42:	1b a2       	std	Y+35, r1	; 0x23
    1e44:	69 8d       	ldd	r22, Y+25	; 0x19
    1e46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e4c:	29 85       	ldd	r18, Y+9	; 0x09
    1e4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e50:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e52:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e54:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	14 f4       	brge	.+4      	; 0x1e60 <main+0x468>
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	8b a3       	std	Y+35, r24	; 0x23
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	9b a1       	ldd	r25, Y+35	; 0x23
    1e64:	89 27       	eor	r24, r25
    1e66:	88 23       	and	r24, r24
    1e68:	69 f5       	brne	.+90     	; 0x1ec4 <main+0x4cc>
    1e6a:	1a a2       	std	Y+34, r1	; 0x22
    1e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e70:	8f 89       	ldd	r24, Y+23	; 0x17
    1e72:	98 8d       	ldd	r25, Y+24	; 0x18
    1e74:	2d 81       	ldd	r18, Y+5	; 0x05
    1e76:	3e 81       	ldd	r19, Y+6	; 0x06
    1e78:	4f 81       	ldd	r20, Y+7	; 0x07
    1e7a:	58 85       	ldd	r21, Y+8	; 0x08
    1e7c:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	14 f4       	brge	.+4      	; 0x1e88 <main+0x490>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	8a a3       	std	Y+34, r24	; 0x22
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8c:	89 27       	eor	r24, r25
    1e8e:	88 23       	and	r24, r24
    1e90:	c9 f4       	brne	.+50     	; 0x1ec4 <main+0x4cc>
    1e92:	19 a2       	std	Y+33, r1	; 0x21
    1e94:	69 89       	ldd	r22, Y+17	; 0x11
    1e96:	7a 89       	ldd	r23, Y+18	; 0x12
    1e98:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9c:	29 81       	ldd	r18, Y+1	; 0x01
    1e9e:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea0:	4b 81       	ldd	r20, Y+3	; 0x03
    1ea2:	5c 81       	ldd	r21, Y+4	; 0x04
    1ea4:	0e 94 4d 13 	call	0x269a	; 0x269a <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	14 f4       	brge	.+4      	; 0x1eb0 <main+0x4b8>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	89 a3       	std	Y+33, r24	; 0x21
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	99 a1       	ldd	r25, Y+33	; 0x21
    1eb4:	89 27       	eor	r24, r25
    1eb6:	88 23       	and	r24, r24
    1eb8:	29 f4       	brne	.+10     	; 0x1ec4 <main+0x4cc>
    1eba:	84 ee       	ldi	r24, 0xE4	; 228
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_SendString>
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <main+0x4d4>
    1ec4:	81 ef       	ldi	r24, 0xF1	; 241
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_SendString>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	e4 96       	adiw	r28, 0x34	; 52
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <__fixunssfsi>:
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	7b 01       	movw	r14, r22
    1eec:	8c 01       	movw	r16, r24
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	5f e4       	ldi	r21, 0x4F	; 79
    1ef6:	0e 94 1d 13 	call	0x263a	; 0x263a <__gesf2>
    1efa:	88 23       	and	r24, r24
    1efc:	8c f0       	brlt	.+34     	; 0x1f20 <__fixunssfsi+0x3e>
    1efe:	c8 01       	movw	r24, r16
    1f00:	b7 01       	movw	r22, r14
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	5f e4       	ldi	r21, 0x4F	; 79
    1f0a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__subsf3>
    1f0e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__fixsfsi>
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	20 50       	subi	r18, 0x00	; 0
    1f18:	30 40       	sbci	r19, 0x00	; 0
    1f1a:	40 40       	sbci	r20, 0x00	; 0
    1f1c:	50 48       	sbci	r21, 0x80	; 128
    1f1e:	06 c0       	rjmp	.+12     	; 0x1f2c <__fixunssfsi+0x4a>
    1f20:	c8 01       	movw	r24, r16
    1f22:	b7 01       	movw	r22, r14
    1f24:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__fixsfsi>
    1f28:	9b 01       	movw	r18, r22
    1f2a:	ac 01       	movw	r20, r24
    1f2c:	b9 01       	movw	r22, r18
    1f2e:	ca 01       	movw	r24, r20
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	ff 90       	pop	r15
    1f36:	ef 90       	pop	r14
    1f38:	08 95       	ret

00001f3a <_fpadd_parts>:
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e3 ea       	ldi	r30, 0xA3	; 163
    1f40:	ff e0       	ldi	r31, 0x0F	; 15
    1f42:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__prologue_saves__>
    1f46:	dc 01       	movw	r26, r24
    1f48:	2b 01       	movw	r4, r22
    1f4a:	fa 01       	movw	r30, r20
    1f4c:	9c 91       	ld	r25, X
    1f4e:	92 30       	cpi	r25, 0x02	; 2
    1f50:	08 f4       	brcc	.+2      	; 0x1f54 <_fpadd_parts+0x1a>
    1f52:	39 c1       	rjmp	.+626    	; 0x21c6 <_fpadd_parts+0x28c>
    1f54:	eb 01       	movw	r28, r22
    1f56:	88 81       	ld	r24, Y
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	08 f4       	brcc	.+2      	; 0x1f5e <_fpadd_parts+0x24>
    1f5c:	33 c1       	rjmp	.+614    	; 0x21c4 <_fpadd_parts+0x28a>
    1f5e:	94 30       	cpi	r25, 0x04	; 4
    1f60:	69 f4       	brne	.+26     	; 0x1f7c <_fpadd_parts+0x42>
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <_fpadd_parts+0x2e>
    1f66:	2f c1       	rjmp	.+606    	; 0x21c6 <_fpadd_parts+0x28c>
    1f68:	11 96       	adiw	r26, 0x01	; 1
    1f6a:	9c 91       	ld	r25, X
    1f6c:	11 97       	sbiw	r26, 0x01	; 1
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	98 17       	cp	r25, r24
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <_fpadd_parts+0x3c>
    1f74:	28 c1       	rjmp	.+592    	; 0x21c6 <_fpadd_parts+0x28c>
    1f76:	a9 ef       	ldi	r26, 0xF9	; 249
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	25 c1       	rjmp	.+586    	; 0x21c6 <_fpadd_parts+0x28c>
    1f7c:	84 30       	cpi	r24, 0x04	; 4
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <_fpadd_parts+0x48>
    1f80:	21 c1       	rjmp	.+578    	; 0x21c4 <_fpadd_parts+0x28a>
    1f82:	82 30       	cpi	r24, 0x02	; 2
    1f84:	a9 f4       	brne	.+42     	; 0x1fb0 <_fpadd_parts+0x76>
    1f86:	92 30       	cpi	r25, 0x02	; 2
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <_fpadd_parts+0x52>
    1f8a:	1d c1       	rjmp	.+570    	; 0x21c6 <_fpadd_parts+0x28c>
    1f8c:	9a 01       	movw	r18, r20
    1f8e:	ad 01       	movw	r20, r26
    1f90:	88 e0       	ldi	r24, 0x08	; 8
    1f92:	ea 01       	movw	r28, r20
    1f94:	09 90       	ld	r0, Y+
    1f96:	ae 01       	movw	r20, r28
    1f98:	e9 01       	movw	r28, r18
    1f9a:	09 92       	st	Y+, r0
    1f9c:	9e 01       	movw	r18, r28
    1f9e:	81 50       	subi	r24, 0x01	; 1
    1fa0:	c1 f7       	brne	.-16     	; 0x1f92 <_fpadd_parts+0x58>
    1fa2:	e2 01       	movw	r28, r4
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	11 96       	adiw	r26, 0x01	; 1
    1fa8:	9c 91       	ld	r25, X
    1faa:	89 23       	and	r24, r25
    1fac:	81 83       	std	Z+1, r24	; 0x01
    1fae:	08 c1       	rjmp	.+528    	; 0x21c0 <_fpadd_parts+0x286>
    1fb0:	92 30       	cpi	r25, 0x02	; 2
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <_fpadd_parts+0x7c>
    1fb4:	07 c1       	rjmp	.+526    	; 0x21c4 <_fpadd_parts+0x28a>
    1fb6:	12 96       	adiw	r26, 0x02	; 2
    1fb8:	2d 90       	ld	r2, X+
    1fba:	3c 90       	ld	r3, X
    1fbc:	13 97       	sbiw	r26, 0x03	; 3
    1fbe:	eb 01       	movw	r28, r22
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc4:	14 96       	adiw	r26, 0x04	; 4
    1fc6:	ad 90       	ld	r10, X+
    1fc8:	bd 90       	ld	r11, X+
    1fca:	cd 90       	ld	r12, X+
    1fcc:	dc 90       	ld	r13, X
    1fce:	17 97       	sbiw	r26, 0x07	; 7
    1fd0:	ec 80       	ldd	r14, Y+4	; 0x04
    1fd2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fd4:	0e 81       	ldd	r16, Y+6	; 0x06
    1fd6:	1f 81       	ldd	r17, Y+7	; 0x07
    1fd8:	91 01       	movw	r18, r2
    1fda:	28 1b       	sub	r18, r24
    1fdc:	39 0b       	sbc	r19, r25
    1fde:	b9 01       	movw	r22, r18
    1fe0:	37 ff       	sbrs	r19, 7
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <_fpadd_parts+0xb2>
    1fe4:	66 27       	eor	r22, r22
    1fe6:	77 27       	eor	r23, r23
    1fe8:	62 1b       	sub	r22, r18
    1fea:	73 0b       	sbc	r23, r19
    1fec:	60 32       	cpi	r22, 0x20	; 32
    1fee:	71 05       	cpc	r23, r1
    1ff0:	0c f0       	brlt	.+2      	; 0x1ff4 <_fpadd_parts+0xba>
    1ff2:	61 c0       	rjmp	.+194    	; 0x20b6 <_fpadd_parts+0x17c>
    1ff4:	12 16       	cp	r1, r18
    1ff6:	13 06       	cpc	r1, r19
    1ff8:	6c f5       	brge	.+90     	; 0x2054 <_fpadd_parts+0x11a>
    1ffa:	37 01       	movw	r6, r14
    1ffc:	48 01       	movw	r8, r16
    1ffe:	06 2e       	mov	r0, r22
    2000:	04 c0       	rjmp	.+8      	; 0x200a <_fpadd_parts+0xd0>
    2002:	96 94       	lsr	r9
    2004:	87 94       	ror	r8
    2006:	77 94       	ror	r7
    2008:	67 94       	ror	r6
    200a:	0a 94       	dec	r0
    200c:	d2 f7       	brpl	.-12     	; 0x2002 <_fpadd_parts+0xc8>
    200e:	21 e0       	ldi	r18, 0x01	; 1
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <_fpadd_parts+0xe6>
    2018:	22 0f       	add	r18, r18
    201a:	33 1f       	adc	r19, r19
    201c:	44 1f       	adc	r20, r20
    201e:	55 1f       	adc	r21, r21
    2020:	6a 95       	dec	r22
    2022:	d2 f7       	brpl	.-12     	; 0x2018 <_fpadd_parts+0xde>
    2024:	21 50       	subi	r18, 0x01	; 1
    2026:	30 40       	sbci	r19, 0x00	; 0
    2028:	40 40       	sbci	r20, 0x00	; 0
    202a:	50 40       	sbci	r21, 0x00	; 0
    202c:	2e 21       	and	r18, r14
    202e:	3f 21       	and	r19, r15
    2030:	40 23       	and	r20, r16
    2032:	51 23       	and	r21, r17
    2034:	21 15       	cp	r18, r1
    2036:	31 05       	cpc	r19, r1
    2038:	41 05       	cpc	r20, r1
    203a:	51 05       	cpc	r21, r1
    203c:	21 f0       	breq	.+8      	; 0x2046 <_fpadd_parts+0x10c>
    203e:	21 e0       	ldi	r18, 0x01	; 1
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	79 01       	movw	r14, r18
    2048:	8a 01       	movw	r16, r20
    204a:	e6 28       	or	r14, r6
    204c:	f7 28       	or	r15, r7
    204e:	08 29       	or	r16, r8
    2050:	19 29       	or	r17, r9
    2052:	3c c0       	rjmp	.+120    	; 0x20cc <_fpadd_parts+0x192>
    2054:	23 2b       	or	r18, r19
    2056:	d1 f1       	breq	.+116    	; 0x20cc <_fpadd_parts+0x192>
    2058:	26 0e       	add	r2, r22
    205a:	37 1e       	adc	r3, r23
    205c:	35 01       	movw	r6, r10
    205e:	46 01       	movw	r8, r12
    2060:	06 2e       	mov	r0, r22
    2062:	04 c0       	rjmp	.+8      	; 0x206c <_fpadd_parts+0x132>
    2064:	96 94       	lsr	r9
    2066:	87 94       	ror	r8
    2068:	77 94       	ror	r7
    206a:	67 94       	ror	r6
    206c:	0a 94       	dec	r0
    206e:	d2 f7       	brpl	.-12     	; 0x2064 <_fpadd_parts+0x12a>
    2070:	21 e0       	ldi	r18, 0x01	; 1
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	04 c0       	rjmp	.+8      	; 0x2082 <_fpadd_parts+0x148>
    207a:	22 0f       	add	r18, r18
    207c:	33 1f       	adc	r19, r19
    207e:	44 1f       	adc	r20, r20
    2080:	55 1f       	adc	r21, r21
    2082:	6a 95       	dec	r22
    2084:	d2 f7       	brpl	.-12     	; 0x207a <_fpadd_parts+0x140>
    2086:	21 50       	subi	r18, 0x01	; 1
    2088:	30 40       	sbci	r19, 0x00	; 0
    208a:	40 40       	sbci	r20, 0x00	; 0
    208c:	50 40       	sbci	r21, 0x00	; 0
    208e:	2a 21       	and	r18, r10
    2090:	3b 21       	and	r19, r11
    2092:	4c 21       	and	r20, r12
    2094:	5d 21       	and	r21, r13
    2096:	21 15       	cp	r18, r1
    2098:	31 05       	cpc	r19, r1
    209a:	41 05       	cpc	r20, r1
    209c:	51 05       	cpc	r21, r1
    209e:	21 f0       	breq	.+8      	; 0x20a8 <_fpadd_parts+0x16e>
    20a0:	21 e0       	ldi	r18, 0x01	; 1
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	59 01       	movw	r10, r18
    20aa:	6a 01       	movw	r12, r20
    20ac:	a6 28       	or	r10, r6
    20ae:	b7 28       	or	r11, r7
    20b0:	c8 28       	or	r12, r8
    20b2:	d9 28       	or	r13, r9
    20b4:	0b c0       	rjmp	.+22     	; 0x20cc <_fpadd_parts+0x192>
    20b6:	82 15       	cp	r24, r2
    20b8:	93 05       	cpc	r25, r3
    20ba:	2c f0       	brlt	.+10     	; 0x20c6 <_fpadd_parts+0x18c>
    20bc:	1c 01       	movw	r2, r24
    20be:	aa 24       	eor	r10, r10
    20c0:	bb 24       	eor	r11, r11
    20c2:	65 01       	movw	r12, r10
    20c4:	03 c0       	rjmp	.+6      	; 0x20cc <_fpadd_parts+0x192>
    20c6:	ee 24       	eor	r14, r14
    20c8:	ff 24       	eor	r15, r15
    20ca:	87 01       	movw	r16, r14
    20cc:	11 96       	adiw	r26, 0x01	; 1
    20ce:	9c 91       	ld	r25, X
    20d0:	d2 01       	movw	r26, r4
    20d2:	11 96       	adiw	r26, 0x01	; 1
    20d4:	8c 91       	ld	r24, X
    20d6:	98 17       	cp	r25, r24
    20d8:	09 f4       	brne	.+2      	; 0x20dc <_fpadd_parts+0x1a2>
    20da:	45 c0       	rjmp	.+138    	; 0x2166 <_fpadd_parts+0x22c>
    20dc:	99 23       	and	r25, r25
    20de:	39 f0       	breq	.+14     	; 0x20ee <_fpadd_parts+0x1b4>
    20e0:	a8 01       	movw	r20, r16
    20e2:	97 01       	movw	r18, r14
    20e4:	2a 19       	sub	r18, r10
    20e6:	3b 09       	sbc	r19, r11
    20e8:	4c 09       	sbc	r20, r12
    20ea:	5d 09       	sbc	r21, r13
    20ec:	06 c0       	rjmp	.+12     	; 0x20fa <_fpadd_parts+0x1c0>
    20ee:	a6 01       	movw	r20, r12
    20f0:	95 01       	movw	r18, r10
    20f2:	2e 19       	sub	r18, r14
    20f4:	3f 09       	sbc	r19, r15
    20f6:	40 0b       	sbc	r20, r16
    20f8:	51 0b       	sbc	r21, r17
    20fa:	57 fd       	sbrc	r21, 7
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <_fpadd_parts+0x1d4>
    20fe:	11 82       	std	Z+1, r1	; 0x01
    2100:	33 82       	std	Z+3, r3	; 0x03
    2102:	22 82       	std	Z+2, r2	; 0x02
    2104:	24 83       	std	Z+4, r18	; 0x04
    2106:	35 83       	std	Z+5, r19	; 0x05
    2108:	46 83       	std	Z+6, r20	; 0x06
    210a:	57 83       	std	Z+7, r21	; 0x07
    210c:	1d c0       	rjmp	.+58     	; 0x2148 <_fpadd_parts+0x20e>
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	81 83       	std	Z+1, r24	; 0x01
    2112:	33 82       	std	Z+3, r3	; 0x03
    2114:	22 82       	std	Z+2, r2	; 0x02
    2116:	88 27       	eor	r24, r24
    2118:	99 27       	eor	r25, r25
    211a:	dc 01       	movw	r26, r24
    211c:	82 1b       	sub	r24, r18
    211e:	93 0b       	sbc	r25, r19
    2120:	a4 0b       	sbc	r26, r20
    2122:	b5 0b       	sbc	r27, r21
    2124:	84 83       	std	Z+4, r24	; 0x04
    2126:	95 83       	std	Z+5, r25	; 0x05
    2128:	a6 83       	std	Z+6, r26	; 0x06
    212a:	b7 83       	std	Z+7, r27	; 0x07
    212c:	0d c0       	rjmp	.+26     	; 0x2148 <_fpadd_parts+0x20e>
    212e:	22 0f       	add	r18, r18
    2130:	33 1f       	adc	r19, r19
    2132:	44 1f       	adc	r20, r20
    2134:	55 1f       	adc	r21, r21
    2136:	24 83       	std	Z+4, r18	; 0x04
    2138:	35 83       	std	Z+5, r19	; 0x05
    213a:	46 83       	std	Z+6, r20	; 0x06
    213c:	57 83       	std	Z+7, r21	; 0x07
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	93 83       	std	Z+3, r25	; 0x03
    2146:	82 83       	std	Z+2, r24	; 0x02
    2148:	24 81       	ldd	r18, Z+4	; 0x04
    214a:	35 81       	ldd	r19, Z+5	; 0x05
    214c:	46 81       	ldd	r20, Z+6	; 0x06
    214e:	57 81       	ldd	r21, Z+7	; 0x07
    2150:	da 01       	movw	r26, r20
    2152:	c9 01       	movw	r24, r18
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	a1 09       	sbc	r26, r1
    2158:	b1 09       	sbc	r27, r1
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	9f 4f       	sbci	r25, 0xFF	; 255
    215e:	af 4f       	sbci	r26, 0xFF	; 255
    2160:	bf 43       	sbci	r27, 0x3F	; 63
    2162:	28 f3       	brcs	.-54     	; 0x212e <_fpadd_parts+0x1f4>
    2164:	0b c0       	rjmp	.+22     	; 0x217c <_fpadd_parts+0x242>
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	33 82       	std	Z+3, r3	; 0x03
    216a:	22 82       	std	Z+2, r2	; 0x02
    216c:	ea 0c       	add	r14, r10
    216e:	fb 1c       	adc	r15, r11
    2170:	0c 1d       	adc	r16, r12
    2172:	1d 1d       	adc	r17, r13
    2174:	e4 82       	std	Z+4, r14	; 0x04
    2176:	f5 82       	std	Z+5, r15	; 0x05
    2178:	06 83       	std	Z+6, r16	; 0x06
    217a:	17 83       	std	Z+7, r17	; 0x07
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	80 83       	st	Z, r24
    2180:	24 81       	ldd	r18, Z+4	; 0x04
    2182:	35 81       	ldd	r19, Z+5	; 0x05
    2184:	46 81       	ldd	r20, Z+6	; 0x06
    2186:	57 81       	ldd	r21, Z+7	; 0x07
    2188:	57 ff       	sbrs	r21, 7
    218a:	1a c0       	rjmp	.+52     	; 0x21c0 <_fpadd_parts+0x286>
    218c:	c9 01       	movw	r24, r18
    218e:	aa 27       	eor	r26, r26
    2190:	97 fd       	sbrc	r25, 7
    2192:	a0 95       	com	r26
    2194:	ba 2f       	mov	r27, r26
    2196:	81 70       	andi	r24, 0x01	; 1
    2198:	90 70       	andi	r25, 0x00	; 0
    219a:	a0 70       	andi	r26, 0x00	; 0
    219c:	b0 70       	andi	r27, 0x00	; 0
    219e:	56 95       	lsr	r21
    21a0:	47 95       	ror	r20
    21a2:	37 95       	ror	r19
    21a4:	27 95       	ror	r18
    21a6:	82 2b       	or	r24, r18
    21a8:	93 2b       	or	r25, r19
    21aa:	a4 2b       	or	r26, r20
    21ac:	b5 2b       	or	r27, r21
    21ae:	84 83       	std	Z+4, r24	; 0x04
    21b0:	95 83       	std	Z+5, r25	; 0x05
    21b2:	a6 83       	std	Z+6, r26	; 0x06
    21b4:	b7 83       	std	Z+7, r27	; 0x07
    21b6:	82 81       	ldd	r24, Z+2	; 0x02
    21b8:	93 81       	ldd	r25, Z+3	; 0x03
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	93 83       	std	Z+3, r25	; 0x03
    21be:	82 83       	std	Z+2, r24	; 0x02
    21c0:	df 01       	movw	r26, r30
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <_fpadd_parts+0x28c>
    21c4:	d2 01       	movw	r26, r4
    21c6:	cd 01       	movw	r24, r26
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	e2 e1       	ldi	r30, 0x12	; 18
    21ce:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__epilogue_restores__>

000021d2 <__subsf3>:
    21d2:	a0 e2       	ldi	r26, 0x20	; 32
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ef ee       	ldi	r30, 0xEF	; 239
    21d8:	f0 e1       	ldi	r31, 0x10	; 16
    21da:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__prologue_saves__+0x18>
    21de:	69 83       	std	Y+1, r22	; 0x01
    21e0:	7a 83       	std	Y+2, r23	; 0x02
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	2d 83       	std	Y+5, r18	; 0x05
    21e8:	3e 83       	std	Y+6, r19	; 0x06
    21ea:	4f 83       	std	Y+7, r20	; 0x07
    21ec:	58 87       	std	Y+8, r21	; 0x08
    21ee:	e9 e0       	ldi	r30, 0x09	; 9
    21f0:	ee 2e       	mov	r14, r30
    21f2:	f1 2c       	mov	r15, r1
    21f4:	ec 0e       	add	r14, r28
    21f6:	fd 1e       	adc	r15, r29
    21f8:	ce 01       	movw	r24, r28
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	b7 01       	movw	r22, r14
    21fe:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2202:	8e 01       	movw	r16, r28
    2204:	0f 5e       	subi	r16, 0xEF	; 239
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	ce 01       	movw	r24, r28
    220a:	05 96       	adiw	r24, 0x05	; 5
    220c:	b8 01       	movw	r22, r16
    220e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2212:	8a 89       	ldd	r24, Y+18	; 0x12
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	89 27       	eor	r24, r25
    2218:	8a 8b       	std	Y+18, r24	; 0x12
    221a:	c7 01       	movw	r24, r14
    221c:	b8 01       	movw	r22, r16
    221e:	ae 01       	movw	r20, r28
    2220:	47 5e       	subi	r20, 0xE7	; 231
    2222:	5f 4f       	sbci	r21, 0xFF	; 255
    2224:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_fpadd_parts>
    2228:	0e 94 99 14 	call	0x2932	; 0x2932 <__pack_f>
    222c:	a0 96       	adiw	r28, 0x20	; 32
    222e:	e6 e0       	ldi	r30, 0x06	; 6
    2230:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__epilogue_restores__+0x18>

00002234 <__addsf3>:
    2234:	a0 e2       	ldi	r26, 0x20	; 32
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e0 e2       	ldi	r30, 0x20	; 32
    223a:	f1 e1       	ldi	r31, 0x11	; 17
    223c:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__prologue_saves__+0x18>
    2240:	69 83       	std	Y+1, r22	; 0x01
    2242:	7a 83       	std	Y+2, r23	; 0x02
    2244:	8b 83       	std	Y+3, r24	; 0x03
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	2d 83       	std	Y+5, r18	; 0x05
    224a:	3e 83       	std	Y+6, r19	; 0x06
    224c:	4f 83       	std	Y+7, r20	; 0x07
    224e:	58 87       	std	Y+8, r21	; 0x08
    2250:	f9 e0       	ldi	r31, 0x09	; 9
    2252:	ef 2e       	mov	r14, r31
    2254:	f1 2c       	mov	r15, r1
    2256:	ec 0e       	add	r14, r28
    2258:	fd 1e       	adc	r15, r29
    225a:	ce 01       	movw	r24, r28
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	b7 01       	movw	r22, r14
    2260:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2264:	8e 01       	movw	r16, r28
    2266:	0f 5e       	subi	r16, 0xEF	; 239
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	ce 01       	movw	r24, r28
    226c:	05 96       	adiw	r24, 0x05	; 5
    226e:	b8 01       	movw	r22, r16
    2270:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2274:	c7 01       	movw	r24, r14
    2276:	b8 01       	movw	r22, r16
    2278:	ae 01       	movw	r20, r28
    227a:	47 5e       	subi	r20, 0xE7	; 231
    227c:	5f 4f       	sbci	r21, 0xFF	; 255
    227e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_fpadd_parts>
    2282:	0e 94 99 14 	call	0x2932	; 0x2932 <__pack_f>
    2286:	a0 96       	adiw	r28, 0x20	; 32
    2288:	e6 e0       	ldi	r30, 0x06	; 6
    228a:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__epilogue_restores__+0x18>

0000228e <__mulsf3>:
    228e:	a0 e2       	ldi	r26, 0x20	; 32
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	ed e4       	ldi	r30, 0x4D	; 77
    2294:	f1 e1       	ldi	r31, 0x11	; 17
    2296:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__prologue_saves__>
    229a:	69 83       	std	Y+1, r22	; 0x01
    229c:	7a 83       	std	Y+2, r23	; 0x02
    229e:	8b 83       	std	Y+3, r24	; 0x03
    22a0:	9c 83       	std	Y+4, r25	; 0x04
    22a2:	2d 83       	std	Y+5, r18	; 0x05
    22a4:	3e 83       	std	Y+6, r19	; 0x06
    22a6:	4f 83       	std	Y+7, r20	; 0x07
    22a8:	58 87       	std	Y+8, r21	; 0x08
    22aa:	ce 01       	movw	r24, r28
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	be 01       	movw	r22, r28
    22b0:	67 5f       	subi	r22, 0xF7	; 247
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    22b8:	ce 01       	movw	r24, r28
    22ba:	05 96       	adiw	r24, 0x05	; 5
    22bc:	be 01       	movw	r22, r28
    22be:	6f 5e       	subi	r22, 0xEF	; 239
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    22c6:	99 85       	ldd	r25, Y+9	; 0x09
    22c8:	92 30       	cpi	r25, 0x02	; 2
    22ca:	88 f0       	brcs	.+34     	; 0x22ee <__mulsf3+0x60>
    22cc:	89 89       	ldd	r24, Y+17	; 0x11
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	c8 f0       	brcs	.+50     	; 0x2304 <__mulsf3+0x76>
    22d2:	94 30       	cpi	r25, 0x04	; 4
    22d4:	19 f4       	brne	.+6      	; 0x22dc <__mulsf3+0x4e>
    22d6:	82 30       	cpi	r24, 0x02	; 2
    22d8:	51 f4       	brne	.+20     	; 0x22ee <__mulsf3+0x60>
    22da:	04 c0       	rjmp	.+8      	; 0x22e4 <__mulsf3+0x56>
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	29 f4       	brne	.+10     	; 0x22ea <__mulsf3+0x5c>
    22e0:	92 30       	cpi	r25, 0x02	; 2
    22e2:	81 f4       	brne	.+32     	; 0x2304 <__mulsf3+0x76>
    22e4:	89 ef       	ldi	r24, 0xF9	; 249
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	c6 c0       	rjmp	.+396    	; 0x2476 <__mulsf3+0x1e8>
    22ea:	92 30       	cpi	r25, 0x02	; 2
    22ec:	49 f4       	brne	.+18     	; 0x2300 <__mulsf3+0x72>
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	8a 89       	ldd	r24, Y+18	; 0x12
    22f4:	98 13       	cpse	r25, r24
    22f6:	21 e0       	ldi	r18, 0x01	; 1
    22f8:	2a 87       	std	Y+10, r18	; 0x0a
    22fa:	ce 01       	movw	r24, r28
    22fc:	09 96       	adiw	r24, 0x09	; 9
    22fe:	bb c0       	rjmp	.+374    	; 0x2476 <__mulsf3+0x1e8>
    2300:	82 30       	cpi	r24, 0x02	; 2
    2302:	49 f4       	brne	.+18     	; 0x2316 <__mulsf3+0x88>
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	8a 89       	ldd	r24, Y+18	; 0x12
    230a:	98 13       	cpse	r25, r24
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	2a 8b       	std	Y+18, r18	; 0x12
    2310:	ce 01       	movw	r24, r28
    2312:	41 96       	adiw	r24, 0x11	; 17
    2314:	b0 c0       	rjmp	.+352    	; 0x2476 <__mulsf3+0x1e8>
    2316:	2d 84       	ldd	r2, Y+13	; 0x0d
    2318:	3e 84       	ldd	r3, Y+14	; 0x0e
    231a:	4f 84       	ldd	r4, Y+15	; 0x0f
    231c:	58 88       	ldd	r5, Y+16	; 0x10
    231e:	6d 88       	ldd	r6, Y+21	; 0x15
    2320:	7e 88       	ldd	r7, Y+22	; 0x16
    2322:	8f 88       	ldd	r8, Y+23	; 0x17
    2324:	98 8c       	ldd	r9, Y+24	; 0x18
    2326:	ee 24       	eor	r14, r14
    2328:	ff 24       	eor	r15, r15
    232a:	87 01       	movw	r16, r14
    232c:	aa 24       	eor	r10, r10
    232e:	bb 24       	eor	r11, r11
    2330:	65 01       	movw	r12, r10
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	e0 e0       	ldi	r30, 0x00	; 0
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	c1 01       	movw	r24, r2
    2340:	81 70       	andi	r24, 0x01	; 1
    2342:	90 70       	andi	r25, 0x00	; 0
    2344:	89 2b       	or	r24, r25
    2346:	e9 f0       	breq	.+58     	; 0x2382 <__mulsf3+0xf4>
    2348:	e6 0c       	add	r14, r6
    234a:	f7 1c       	adc	r15, r7
    234c:	08 1d       	adc	r16, r8
    234e:	19 1d       	adc	r17, r9
    2350:	9a 01       	movw	r18, r20
    2352:	ab 01       	movw	r20, r22
    2354:	2a 0d       	add	r18, r10
    2356:	3b 1d       	adc	r19, r11
    2358:	4c 1d       	adc	r20, r12
    235a:	5d 1d       	adc	r21, r13
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a0 e0       	ldi	r26, 0x00	; 0
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e6 14       	cp	r14, r6
    2366:	f7 04       	cpc	r15, r7
    2368:	08 05       	cpc	r16, r8
    236a:	19 05       	cpc	r17, r9
    236c:	20 f4       	brcc	.+8      	; 0x2376 <__mulsf3+0xe8>
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e0       	ldi	r26, 0x00	; 0
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	ba 01       	movw	r22, r20
    2378:	a9 01       	movw	r20, r18
    237a:	48 0f       	add	r20, r24
    237c:	59 1f       	adc	r21, r25
    237e:	6a 1f       	adc	r22, r26
    2380:	7b 1f       	adc	r23, r27
    2382:	aa 0c       	add	r10, r10
    2384:	bb 1c       	adc	r11, r11
    2386:	cc 1c       	adc	r12, r12
    2388:	dd 1c       	adc	r13, r13
    238a:	97 fe       	sbrs	r9, 7
    238c:	08 c0       	rjmp	.+16     	; 0x239e <__mulsf3+0x110>
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e0       	ldi	r26, 0x00	; 0
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	a8 2a       	or	r10, r24
    2398:	b9 2a       	or	r11, r25
    239a:	ca 2a       	or	r12, r26
    239c:	db 2a       	or	r13, r27
    239e:	31 96       	adiw	r30, 0x01	; 1
    23a0:	e0 32       	cpi	r30, 0x20	; 32
    23a2:	f1 05       	cpc	r31, r1
    23a4:	49 f0       	breq	.+18     	; 0x23b8 <__mulsf3+0x12a>
    23a6:	66 0c       	add	r6, r6
    23a8:	77 1c       	adc	r7, r7
    23aa:	88 1c       	adc	r8, r8
    23ac:	99 1c       	adc	r9, r9
    23ae:	56 94       	lsr	r5
    23b0:	47 94       	ror	r4
    23b2:	37 94       	ror	r3
    23b4:	27 94       	ror	r2
    23b6:	c3 cf       	rjmp	.-122    	; 0x233e <__mulsf3+0xb0>
    23b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    23ba:	ea 89       	ldd	r30, Y+18	; 0x12
    23bc:	2b 89       	ldd	r18, Y+19	; 0x13
    23be:	3c 89       	ldd	r19, Y+20	; 0x14
    23c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    23c4:	28 0f       	add	r18, r24
    23c6:	39 1f       	adc	r19, r25
    23c8:	2e 5f       	subi	r18, 0xFE	; 254
    23ca:	3f 4f       	sbci	r19, 0xFF	; 255
    23cc:	17 c0       	rjmp	.+46     	; 0x23fc <__mulsf3+0x16e>
    23ce:	ca 01       	movw	r24, r20
    23d0:	81 70       	andi	r24, 0x01	; 1
    23d2:	90 70       	andi	r25, 0x00	; 0
    23d4:	89 2b       	or	r24, r25
    23d6:	61 f0       	breq	.+24     	; 0x23f0 <__mulsf3+0x162>
    23d8:	16 95       	lsr	r17
    23da:	07 95       	ror	r16
    23dc:	f7 94       	ror	r15
    23de:	e7 94       	ror	r14
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e0       	ldi	r26, 0x00	; 0
    23e6:	b0 e8       	ldi	r27, 0x80	; 128
    23e8:	e8 2a       	or	r14, r24
    23ea:	f9 2a       	or	r15, r25
    23ec:	0a 2b       	or	r16, r26
    23ee:	1b 2b       	or	r17, r27
    23f0:	76 95       	lsr	r23
    23f2:	67 95       	ror	r22
    23f4:	57 95       	ror	r21
    23f6:	47 95       	ror	r20
    23f8:	2f 5f       	subi	r18, 0xFF	; 255
    23fa:	3f 4f       	sbci	r19, 0xFF	; 255
    23fc:	77 fd       	sbrc	r23, 7
    23fe:	e7 cf       	rjmp	.-50     	; 0x23ce <__mulsf3+0x140>
    2400:	0c c0       	rjmp	.+24     	; 0x241a <__mulsf3+0x18c>
    2402:	44 0f       	add	r20, r20
    2404:	55 1f       	adc	r21, r21
    2406:	66 1f       	adc	r22, r22
    2408:	77 1f       	adc	r23, r23
    240a:	17 fd       	sbrc	r17, 7
    240c:	41 60       	ori	r20, 0x01	; 1
    240e:	ee 0c       	add	r14, r14
    2410:	ff 1c       	adc	r15, r15
    2412:	00 1f       	adc	r16, r16
    2414:	11 1f       	adc	r17, r17
    2416:	21 50       	subi	r18, 0x01	; 1
    2418:	30 40       	sbci	r19, 0x00	; 0
    241a:	40 30       	cpi	r20, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	59 07       	cpc	r21, r25
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	69 07       	cpc	r22, r25
    2424:	90 e4       	ldi	r25, 0x40	; 64
    2426:	79 07       	cpc	r23, r25
    2428:	60 f3       	brcs	.-40     	; 0x2402 <__mulsf3+0x174>
    242a:	2b 8f       	std	Y+27, r18	; 0x1b
    242c:	3c 8f       	std	Y+28, r19	; 0x1c
    242e:	db 01       	movw	r26, r22
    2430:	ca 01       	movw	r24, r20
    2432:	8f 77       	andi	r24, 0x7F	; 127
    2434:	90 70       	andi	r25, 0x00	; 0
    2436:	a0 70       	andi	r26, 0x00	; 0
    2438:	b0 70       	andi	r27, 0x00	; 0
    243a:	80 34       	cpi	r24, 0x40	; 64
    243c:	91 05       	cpc	r25, r1
    243e:	a1 05       	cpc	r26, r1
    2440:	b1 05       	cpc	r27, r1
    2442:	61 f4       	brne	.+24     	; 0x245c <__mulsf3+0x1ce>
    2444:	47 fd       	sbrc	r20, 7
    2446:	0a c0       	rjmp	.+20     	; 0x245c <__mulsf3+0x1ce>
    2448:	e1 14       	cp	r14, r1
    244a:	f1 04       	cpc	r15, r1
    244c:	01 05       	cpc	r16, r1
    244e:	11 05       	cpc	r17, r1
    2450:	29 f0       	breq	.+10     	; 0x245c <__mulsf3+0x1ce>
    2452:	40 5c       	subi	r20, 0xC0	; 192
    2454:	5f 4f       	sbci	r21, 0xFF	; 255
    2456:	6f 4f       	sbci	r22, 0xFF	; 255
    2458:	7f 4f       	sbci	r23, 0xFF	; 255
    245a:	40 78       	andi	r20, 0x80	; 128
    245c:	1a 8e       	std	Y+26, r1	; 0x1a
    245e:	fe 17       	cp	r31, r30
    2460:	11 f0       	breq	.+4      	; 0x2466 <__mulsf3+0x1d8>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	8a 8f       	std	Y+26, r24	; 0x1a
    2466:	4d 8f       	std	Y+29, r20	; 0x1d
    2468:	5e 8f       	std	Y+30, r21	; 0x1e
    246a:	6f 8f       	std	Y+31, r22	; 0x1f
    246c:	78 a3       	std	Y+32, r23	; 0x20
    246e:	83 e0       	ldi	r24, 0x03	; 3
    2470:	89 8f       	std	Y+25, r24	; 0x19
    2472:	ce 01       	movw	r24, r28
    2474:	49 96       	adiw	r24, 0x19	; 25
    2476:	0e 94 99 14 	call	0x2932	; 0x2932 <__pack_f>
    247a:	a0 96       	adiw	r28, 0x20	; 32
    247c:	e2 e1       	ldi	r30, 0x12	; 18
    247e:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__epilogue_restores__>

00002482 <__divsf3>:
    2482:	a8 e1       	ldi	r26, 0x18	; 24
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e7 e4       	ldi	r30, 0x47	; 71
    2488:	f2 e1       	ldi	r31, 0x12	; 18
    248a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x10>
    248e:	69 83       	std	Y+1, r22	; 0x01
    2490:	7a 83       	std	Y+2, r23	; 0x02
    2492:	8b 83       	std	Y+3, r24	; 0x03
    2494:	9c 83       	std	Y+4, r25	; 0x04
    2496:	2d 83       	std	Y+5, r18	; 0x05
    2498:	3e 83       	std	Y+6, r19	; 0x06
    249a:	4f 83       	std	Y+7, r20	; 0x07
    249c:	58 87       	std	Y+8, r21	; 0x08
    249e:	b9 e0       	ldi	r27, 0x09	; 9
    24a0:	eb 2e       	mov	r14, r27
    24a2:	f1 2c       	mov	r15, r1
    24a4:	ec 0e       	add	r14, r28
    24a6:	fd 1e       	adc	r15, r29
    24a8:	ce 01       	movw	r24, r28
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	b7 01       	movw	r22, r14
    24ae:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    24b2:	8e 01       	movw	r16, r28
    24b4:	0f 5e       	subi	r16, 0xEF	; 239
    24b6:	1f 4f       	sbci	r17, 0xFF	; 255
    24b8:	ce 01       	movw	r24, r28
    24ba:	05 96       	adiw	r24, 0x05	; 5
    24bc:	b8 01       	movw	r22, r16
    24be:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    24c2:	29 85       	ldd	r18, Y+9	; 0x09
    24c4:	22 30       	cpi	r18, 0x02	; 2
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <__divsf3+0x48>
    24c8:	7e c0       	rjmp	.+252    	; 0x25c6 <__divsf3+0x144>
    24ca:	39 89       	ldd	r19, Y+17	; 0x11
    24cc:	32 30       	cpi	r19, 0x02	; 2
    24ce:	10 f4       	brcc	.+4      	; 0x24d4 <__divsf3+0x52>
    24d0:	b8 01       	movw	r22, r16
    24d2:	7c c0       	rjmp	.+248    	; 0x25cc <__divsf3+0x14a>
    24d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d6:	9a 89       	ldd	r25, Y+18	; 0x12
    24d8:	89 27       	eor	r24, r25
    24da:	8a 87       	std	Y+10, r24	; 0x0a
    24dc:	24 30       	cpi	r18, 0x04	; 4
    24de:	11 f0       	breq	.+4      	; 0x24e4 <__divsf3+0x62>
    24e0:	22 30       	cpi	r18, 0x02	; 2
    24e2:	31 f4       	brne	.+12     	; 0x24f0 <__divsf3+0x6e>
    24e4:	23 17       	cp	r18, r19
    24e6:	09 f0       	breq	.+2      	; 0x24ea <__divsf3+0x68>
    24e8:	6e c0       	rjmp	.+220    	; 0x25c6 <__divsf3+0x144>
    24ea:	69 ef       	ldi	r22, 0xF9	; 249
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	6e c0       	rjmp	.+220    	; 0x25cc <__divsf3+0x14a>
    24f0:	34 30       	cpi	r19, 0x04	; 4
    24f2:	39 f4       	brne	.+14     	; 0x2502 <__divsf3+0x80>
    24f4:	1d 86       	std	Y+13, r1	; 0x0d
    24f6:	1e 86       	std	Y+14, r1	; 0x0e
    24f8:	1f 86       	std	Y+15, r1	; 0x0f
    24fa:	18 8a       	std	Y+16, r1	; 0x10
    24fc:	1c 86       	std	Y+12, r1	; 0x0c
    24fe:	1b 86       	std	Y+11, r1	; 0x0b
    2500:	04 c0       	rjmp	.+8      	; 0x250a <__divsf3+0x88>
    2502:	32 30       	cpi	r19, 0x02	; 2
    2504:	21 f4       	brne	.+8      	; 0x250e <__divsf3+0x8c>
    2506:	84 e0       	ldi	r24, 0x04	; 4
    2508:	89 87       	std	Y+9, r24	; 0x09
    250a:	b7 01       	movw	r22, r14
    250c:	5f c0       	rjmp	.+190    	; 0x25cc <__divsf3+0x14a>
    250e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2510:	3c 85       	ldd	r19, Y+12	; 0x0c
    2512:	8b 89       	ldd	r24, Y+19	; 0x13
    2514:	9c 89       	ldd	r25, Y+20	; 0x14
    2516:	28 1b       	sub	r18, r24
    2518:	39 0b       	sbc	r19, r25
    251a:	3c 87       	std	Y+12, r19	; 0x0c
    251c:	2b 87       	std	Y+11, r18	; 0x0b
    251e:	ed 84       	ldd	r14, Y+13	; 0x0d
    2520:	fe 84       	ldd	r15, Y+14	; 0x0e
    2522:	0f 85       	ldd	r16, Y+15	; 0x0f
    2524:	18 89       	ldd	r17, Y+16	; 0x10
    2526:	ad 88       	ldd	r10, Y+21	; 0x15
    2528:	be 88       	ldd	r11, Y+22	; 0x16
    252a:	cf 88       	ldd	r12, Y+23	; 0x17
    252c:	d8 8c       	ldd	r13, Y+24	; 0x18
    252e:	ea 14       	cp	r14, r10
    2530:	fb 04       	cpc	r15, r11
    2532:	0c 05       	cpc	r16, r12
    2534:	1d 05       	cpc	r17, r13
    2536:	40 f4       	brcc	.+16     	; 0x2548 <__divsf3+0xc6>
    2538:	ee 0c       	add	r14, r14
    253a:	ff 1c       	adc	r15, r15
    253c:	00 1f       	adc	r16, r16
    253e:	11 1f       	adc	r17, r17
    2540:	21 50       	subi	r18, 0x01	; 1
    2542:	30 40       	sbci	r19, 0x00	; 0
    2544:	3c 87       	std	Y+12, r19	; 0x0c
    2546:	2b 87       	std	Y+11, r18	; 0x0b
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a0 e0       	ldi	r26, 0x00	; 0
    2556:	b0 e4       	ldi	r27, 0x40	; 64
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	ea 14       	cp	r14, r10
    255e:	fb 04       	cpc	r15, r11
    2560:	0c 05       	cpc	r16, r12
    2562:	1d 05       	cpc	r17, r13
    2564:	40 f0       	brcs	.+16     	; 0x2576 <__divsf3+0xf4>
    2566:	28 2b       	or	r18, r24
    2568:	39 2b       	or	r19, r25
    256a:	4a 2b       	or	r20, r26
    256c:	5b 2b       	or	r21, r27
    256e:	ea 18       	sub	r14, r10
    2570:	fb 08       	sbc	r15, r11
    2572:	0c 09       	sbc	r16, r12
    2574:	1d 09       	sbc	r17, r13
    2576:	b6 95       	lsr	r27
    2578:	a7 95       	ror	r26
    257a:	97 95       	ror	r25
    257c:	87 95       	ror	r24
    257e:	ee 0c       	add	r14, r14
    2580:	ff 1c       	adc	r15, r15
    2582:	00 1f       	adc	r16, r16
    2584:	11 1f       	adc	r17, r17
    2586:	6f 5f       	subi	r22, 0xFF	; 255
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	6f 31       	cpi	r22, 0x1F	; 31
    258c:	71 05       	cpc	r23, r1
    258e:	31 f7       	brne	.-52     	; 0x255c <__divsf3+0xda>
    2590:	da 01       	movw	r26, r20
    2592:	c9 01       	movw	r24, r18
    2594:	8f 77       	andi	r24, 0x7F	; 127
    2596:	90 70       	andi	r25, 0x00	; 0
    2598:	a0 70       	andi	r26, 0x00	; 0
    259a:	b0 70       	andi	r27, 0x00	; 0
    259c:	80 34       	cpi	r24, 0x40	; 64
    259e:	91 05       	cpc	r25, r1
    25a0:	a1 05       	cpc	r26, r1
    25a2:	b1 05       	cpc	r27, r1
    25a4:	61 f4       	brne	.+24     	; 0x25be <__divsf3+0x13c>
    25a6:	27 fd       	sbrc	r18, 7
    25a8:	0a c0       	rjmp	.+20     	; 0x25be <__divsf3+0x13c>
    25aa:	e1 14       	cp	r14, r1
    25ac:	f1 04       	cpc	r15, r1
    25ae:	01 05       	cpc	r16, r1
    25b0:	11 05       	cpc	r17, r1
    25b2:	29 f0       	breq	.+10     	; 0x25be <__divsf3+0x13c>
    25b4:	20 5c       	subi	r18, 0xC0	; 192
    25b6:	3f 4f       	sbci	r19, 0xFF	; 255
    25b8:	4f 4f       	sbci	r20, 0xFF	; 255
    25ba:	5f 4f       	sbci	r21, 0xFF	; 255
    25bc:	20 78       	andi	r18, 0x80	; 128
    25be:	2d 87       	std	Y+13, r18	; 0x0d
    25c0:	3e 87       	std	Y+14, r19	; 0x0e
    25c2:	4f 87       	std	Y+15, r20	; 0x0f
    25c4:	58 8b       	std	Y+16, r21	; 0x10
    25c6:	be 01       	movw	r22, r28
    25c8:	67 5f       	subi	r22, 0xF7	; 247
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255
    25cc:	cb 01       	movw	r24, r22
    25ce:	0e 94 99 14 	call	0x2932	; 0x2932 <__pack_f>
    25d2:	68 96       	adiw	r28, 0x18	; 24
    25d4:	ea e0       	ldi	r30, 0x0A	; 10
    25d6:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x10>

000025da <__gtsf2>:
    25da:	a8 e1       	ldi	r26, 0x18	; 24
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e3 ef       	ldi	r30, 0xF3	; 243
    25e0:	f2 e1       	ldi	r31, 0x12	; 18
    25e2:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__prologue_saves__+0x18>
    25e6:	69 83       	std	Y+1, r22	; 0x01
    25e8:	7a 83       	std	Y+2, r23	; 0x02
    25ea:	8b 83       	std	Y+3, r24	; 0x03
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	2d 83       	std	Y+5, r18	; 0x05
    25f0:	3e 83       	std	Y+6, r19	; 0x06
    25f2:	4f 83       	std	Y+7, r20	; 0x07
    25f4:	58 87       	std	Y+8, r21	; 0x08
    25f6:	89 e0       	ldi	r24, 0x09	; 9
    25f8:	e8 2e       	mov	r14, r24
    25fa:	f1 2c       	mov	r15, r1
    25fc:	ec 0e       	add	r14, r28
    25fe:	fd 1e       	adc	r15, r29
    2600:	ce 01       	movw	r24, r28
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	b7 01       	movw	r22, r14
    2606:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    260a:	8e 01       	movw	r16, r28
    260c:	0f 5e       	subi	r16, 0xEF	; 239
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	ce 01       	movw	r24, r28
    2612:	05 96       	adiw	r24, 0x05	; 5
    2614:	b8 01       	movw	r22, r16
    2616:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	40 f0       	brcs	.+16     	; 0x2630 <__gtsf2+0x56>
    2620:	89 89       	ldd	r24, Y+17	; 0x11
    2622:	82 30       	cpi	r24, 0x02	; 2
    2624:	28 f0       	brcs	.+10     	; 0x2630 <__gtsf2+0x56>
    2626:	c7 01       	movw	r24, r14
    2628:	b8 01       	movw	r22, r16
    262a:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__fpcmp_parts_f>
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <__gtsf2+0x58>
    2630:	8f ef       	ldi	r24, 0xFF	; 255
    2632:	68 96       	adiw	r28, 0x18	; 24
    2634:	e6 e0       	ldi	r30, 0x06	; 6
    2636:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__epilogue_restores__+0x18>

0000263a <__gesf2>:
    263a:	a8 e1       	ldi	r26, 0x18	; 24
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e3 e2       	ldi	r30, 0x23	; 35
    2640:	f3 e1       	ldi	r31, 0x13	; 19
    2642:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__prologue_saves__+0x18>
    2646:	69 83       	std	Y+1, r22	; 0x01
    2648:	7a 83       	std	Y+2, r23	; 0x02
    264a:	8b 83       	std	Y+3, r24	; 0x03
    264c:	9c 83       	std	Y+4, r25	; 0x04
    264e:	2d 83       	std	Y+5, r18	; 0x05
    2650:	3e 83       	std	Y+6, r19	; 0x06
    2652:	4f 83       	std	Y+7, r20	; 0x07
    2654:	58 87       	std	Y+8, r21	; 0x08
    2656:	89 e0       	ldi	r24, 0x09	; 9
    2658:	e8 2e       	mov	r14, r24
    265a:	f1 2c       	mov	r15, r1
    265c:	ec 0e       	add	r14, r28
    265e:	fd 1e       	adc	r15, r29
    2660:	ce 01       	movw	r24, r28
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	b7 01       	movw	r22, r14
    2666:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    266a:	8e 01       	movw	r16, r28
    266c:	0f 5e       	subi	r16, 0xEF	; 239
    266e:	1f 4f       	sbci	r17, 0xFF	; 255
    2670:	ce 01       	movw	r24, r28
    2672:	05 96       	adiw	r24, 0x05	; 5
    2674:	b8 01       	movw	r22, r16
    2676:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	82 30       	cpi	r24, 0x02	; 2
    267e:	40 f0       	brcs	.+16     	; 0x2690 <__gesf2+0x56>
    2680:	89 89       	ldd	r24, Y+17	; 0x11
    2682:	82 30       	cpi	r24, 0x02	; 2
    2684:	28 f0       	brcs	.+10     	; 0x2690 <__gesf2+0x56>
    2686:	c7 01       	movw	r24, r14
    2688:	b8 01       	movw	r22, r16
    268a:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__fpcmp_parts_f>
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <__gesf2+0x58>
    2690:	8f ef       	ldi	r24, 0xFF	; 255
    2692:	68 96       	adiw	r28, 0x18	; 24
    2694:	e6 e0       	ldi	r30, 0x06	; 6
    2696:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__epilogue_restores__+0x18>

0000269a <__ltsf2>:
    269a:	a8 e1       	ldi	r26, 0x18	; 24
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e3 e5       	ldi	r30, 0x53	; 83
    26a0:	f3 e1       	ldi	r31, 0x13	; 19
    26a2:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__prologue_saves__+0x18>
    26a6:	69 83       	std	Y+1, r22	; 0x01
    26a8:	7a 83       	std	Y+2, r23	; 0x02
    26aa:	8b 83       	std	Y+3, r24	; 0x03
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	2d 83       	std	Y+5, r18	; 0x05
    26b0:	3e 83       	std	Y+6, r19	; 0x06
    26b2:	4f 83       	std	Y+7, r20	; 0x07
    26b4:	58 87       	std	Y+8, r21	; 0x08
    26b6:	89 e0       	ldi	r24, 0x09	; 9
    26b8:	e8 2e       	mov	r14, r24
    26ba:	f1 2c       	mov	r15, r1
    26bc:	ec 0e       	add	r14, r28
    26be:	fd 1e       	adc	r15, r29
    26c0:	ce 01       	movw	r24, r28
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	b7 01       	movw	r22, r14
    26c6:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    26ca:	8e 01       	movw	r16, r28
    26cc:	0f 5e       	subi	r16, 0xEF	; 239
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	ce 01       	movw	r24, r28
    26d2:	05 96       	adiw	r24, 0x05	; 5
    26d4:	b8 01       	movw	r22, r16
    26d6:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	82 30       	cpi	r24, 0x02	; 2
    26de:	40 f0       	brcs	.+16     	; 0x26f0 <__ltsf2+0x56>
    26e0:	89 89       	ldd	r24, Y+17	; 0x11
    26e2:	82 30       	cpi	r24, 0x02	; 2
    26e4:	28 f0       	brcs	.+10     	; 0x26f0 <__ltsf2+0x56>
    26e6:	c7 01       	movw	r24, r14
    26e8:	b8 01       	movw	r22, r16
    26ea:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__fpcmp_parts_f>
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <__ltsf2+0x58>
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	68 96       	adiw	r28, 0x18	; 24
    26f4:	e6 e0       	ldi	r30, 0x06	; 6
    26f6:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__epilogue_restores__+0x18>

000026fa <__fixsfsi>:
    26fa:	ac e0       	ldi	r26, 0x0C	; 12
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e3 e8       	ldi	r30, 0x83	; 131
    2700:	f3 e1       	ldi	r31, 0x13	; 19
    2702:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__prologue_saves__+0x20>
    2706:	69 83       	std	Y+1, r22	; 0x01
    2708:	7a 83       	std	Y+2, r23	; 0x02
    270a:	8b 83       	std	Y+3, r24	; 0x03
    270c:	9c 83       	std	Y+4, r25	; 0x04
    270e:	ce 01       	movw	r24, r28
    2710:	01 96       	adiw	r24, 0x01	; 1
    2712:	be 01       	movw	r22, r28
    2714:	6b 5f       	subi	r22, 0xFB	; 251
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	82 30       	cpi	r24, 0x02	; 2
    2720:	61 f1       	breq	.+88     	; 0x277a <__fixsfsi+0x80>
    2722:	82 30       	cpi	r24, 0x02	; 2
    2724:	50 f1       	brcs	.+84     	; 0x277a <__fixsfsi+0x80>
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	21 f4       	brne	.+8      	; 0x2732 <__fixsfsi+0x38>
    272a:	8e 81       	ldd	r24, Y+6	; 0x06
    272c:	88 23       	and	r24, r24
    272e:	51 f1       	breq	.+84     	; 0x2784 <__fixsfsi+0x8a>
    2730:	2e c0       	rjmp	.+92     	; 0x278e <__fixsfsi+0x94>
    2732:	2f 81       	ldd	r18, Y+7	; 0x07
    2734:	38 85       	ldd	r19, Y+8	; 0x08
    2736:	37 fd       	sbrc	r19, 7
    2738:	20 c0       	rjmp	.+64     	; 0x277a <__fixsfsi+0x80>
    273a:	6e 81       	ldd	r22, Y+6	; 0x06
    273c:	2f 31       	cpi	r18, 0x1F	; 31
    273e:	31 05       	cpc	r19, r1
    2740:	1c f0       	brlt	.+6      	; 0x2748 <__fixsfsi+0x4e>
    2742:	66 23       	and	r22, r22
    2744:	f9 f0       	breq	.+62     	; 0x2784 <__fixsfsi+0x8a>
    2746:	23 c0       	rjmp	.+70     	; 0x278e <__fixsfsi+0x94>
    2748:	8e e1       	ldi	r24, 0x1E	; 30
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	82 1b       	sub	r24, r18
    274e:	93 0b       	sbc	r25, r19
    2750:	29 85       	ldd	r18, Y+9	; 0x09
    2752:	3a 85       	ldd	r19, Y+10	; 0x0a
    2754:	4b 85       	ldd	r20, Y+11	; 0x0b
    2756:	5c 85       	ldd	r21, Y+12	; 0x0c
    2758:	04 c0       	rjmp	.+8      	; 0x2762 <__fixsfsi+0x68>
    275a:	56 95       	lsr	r21
    275c:	47 95       	ror	r20
    275e:	37 95       	ror	r19
    2760:	27 95       	ror	r18
    2762:	8a 95       	dec	r24
    2764:	d2 f7       	brpl	.-12     	; 0x275a <__fixsfsi+0x60>
    2766:	66 23       	and	r22, r22
    2768:	b1 f0       	breq	.+44     	; 0x2796 <__fixsfsi+0x9c>
    276a:	50 95       	com	r21
    276c:	40 95       	com	r20
    276e:	30 95       	com	r19
    2770:	21 95       	neg	r18
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
    2774:	4f 4f       	sbci	r20, 0xFF	; 255
    2776:	5f 4f       	sbci	r21, 0xFF	; 255
    2778:	0e c0       	rjmp	.+28     	; 0x2796 <__fixsfsi+0x9c>
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	09 c0       	rjmp	.+18     	; 0x2796 <__fixsfsi+0x9c>
    2784:	2f ef       	ldi	r18, 0xFF	; 255
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f ef       	ldi	r20, 0xFF	; 255
    278a:	5f e7       	ldi	r21, 0x7F	; 127
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <__fixsfsi+0x9c>
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e8       	ldi	r21, 0x80	; 128
    2796:	b9 01       	movw	r22, r18
    2798:	ca 01       	movw	r24, r20
    279a:	2c 96       	adiw	r28, 0x0c	; 12
    279c:	e2 e0       	ldi	r30, 0x02	; 2
    279e:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__epilogue_restores__+0x20>

000027a2 <__floatunsisf>:
    27a2:	a8 e0       	ldi	r26, 0x08	; 8
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e7 ed       	ldi	r30, 0xD7	; 215
    27a8:	f3 e1       	ldi	r31, 0x13	; 19
    27aa:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x10>
    27ae:	7b 01       	movw	r14, r22
    27b0:	8c 01       	movw	r16, r24
    27b2:	61 15       	cp	r22, r1
    27b4:	71 05       	cpc	r23, r1
    27b6:	81 05       	cpc	r24, r1
    27b8:	91 05       	cpc	r25, r1
    27ba:	19 f4       	brne	.+6      	; 0x27c2 <__floatunsisf+0x20>
    27bc:	82 e0       	ldi	r24, 0x02	; 2
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	60 c0       	rjmp	.+192    	; 0x2882 <__floatunsisf+0xe0>
    27c2:	83 e0       	ldi	r24, 0x03	; 3
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	8e e1       	ldi	r24, 0x1E	; 30
    27c8:	c8 2e       	mov	r12, r24
    27ca:	d1 2c       	mov	r13, r1
    27cc:	dc 82       	std	Y+4, r13	; 0x04
    27ce:	cb 82       	std	Y+3, r12	; 0x03
    27d0:	ed 82       	std	Y+5, r14	; 0x05
    27d2:	fe 82       	std	Y+6, r15	; 0x06
    27d4:	0f 83       	std	Y+7, r16	; 0x07
    27d6:	18 87       	std	Y+8, r17	; 0x08
    27d8:	c8 01       	movw	r24, r16
    27da:	b7 01       	movw	r22, r14
    27dc:	0e 94 4a 14 	call	0x2894	; 0x2894 <__clzsi2>
    27e0:	fc 01       	movw	r30, r24
    27e2:	31 97       	sbiw	r30, 0x01	; 1
    27e4:	f7 ff       	sbrs	r31, 7
    27e6:	3b c0       	rjmp	.+118    	; 0x285e <__floatunsisf+0xbc>
    27e8:	22 27       	eor	r18, r18
    27ea:	33 27       	eor	r19, r19
    27ec:	2e 1b       	sub	r18, r30
    27ee:	3f 0b       	sbc	r19, r31
    27f0:	57 01       	movw	r10, r14
    27f2:	68 01       	movw	r12, r16
    27f4:	02 2e       	mov	r0, r18
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <__floatunsisf+0x5e>
    27f8:	d6 94       	lsr	r13
    27fa:	c7 94       	ror	r12
    27fc:	b7 94       	ror	r11
    27fe:	a7 94       	ror	r10
    2800:	0a 94       	dec	r0
    2802:	d2 f7       	brpl	.-12     	; 0x27f8 <__floatunsisf+0x56>
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a0 e0       	ldi	r26, 0x00	; 0
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	04 c0       	rjmp	.+8      	; 0x281e <__floatunsisf+0x7c>
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	aa 1f       	adc	r26, r26
    281c:	bb 1f       	adc	r27, r27
    281e:	2a 95       	dec	r18
    2820:	d2 f7       	brpl	.-12     	; 0x2816 <__floatunsisf+0x74>
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	a1 09       	sbc	r26, r1
    2826:	b1 09       	sbc	r27, r1
    2828:	8e 21       	and	r24, r14
    282a:	9f 21       	and	r25, r15
    282c:	a0 23       	and	r26, r16
    282e:	b1 23       	and	r27, r17
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	a1 05       	cpc	r26, r1
    2834:	b1 05       	cpc	r27, r1
    2836:	21 f0       	breq	.+8      	; 0x2840 <__floatunsisf+0x9e>
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	4a 29       	or	r20, r10
    2842:	5b 29       	or	r21, r11
    2844:	6c 29       	or	r22, r12
    2846:	7d 29       	or	r23, r13
    2848:	4d 83       	std	Y+5, r20	; 0x05
    284a:	5e 83       	std	Y+6, r21	; 0x06
    284c:	6f 83       	std	Y+7, r22	; 0x07
    284e:	78 87       	std	Y+8, r23	; 0x08
    2850:	8e e1       	ldi	r24, 0x1E	; 30
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	8e 1b       	sub	r24, r30
    2856:	9f 0b       	sbc	r25, r31
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
    285c:	12 c0       	rjmp	.+36     	; 0x2882 <__floatunsisf+0xe0>
    285e:	30 97       	sbiw	r30, 0x00	; 0
    2860:	81 f0       	breq	.+32     	; 0x2882 <__floatunsisf+0xe0>
    2862:	0e 2e       	mov	r0, r30
    2864:	04 c0       	rjmp	.+8      	; 0x286e <__floatunsisf+0xcc>
    2866:	ee 0c       	add	r14, r14
    2868:	ff 1c       	adc	r15, r15
    286a:	00 1f       	adc	r16, r16
    286c:	11 1f       	adc	r17, r17
    286e:	0a 94       	dec	r0
    2870:	d2 f7       	brpl	.-12     	; 0x2866 <__floatunsisf+0xc4>
    2872:	ed 82       	std	Y+5, r14	; 0x05
    2874:	fe 82       	std	Y+6, r15	; 0x06
    2876:	0f 83       	std	Y+7, r16	; 0x07
    2878:	18 87       	std	Y+8, r17	; 0x08
    287a:	ce 1a       	sub	r12, r30
    287c:	df 0a       	sbc	r13, r31
    287e:	dc 82       	std	Y+4, r13	; 0x04
    2880:	cb 82       	std	Y+3, r12	; 0x03
    2882:	1a 82       	std	Y+2, r1	; 0x02
    2884:	ce 01       	movw	r24, r28
    2886:	01 96       	adiw	r24, 0x01	; 1
    2888:	0e 94 99 14 	call	0x2932	; 0x2932 <__pack_f>
    288c:	28 96       	adiw	r28, 0x08	; 8
    288e:	ea e0       	ldi	r30, 0x0A	; 10
    2890:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x10>

00002894 <__clzsi2>:
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	7b 01       	movw	r14, r22
    289e:	8c 01       	movw	r16, r24
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	e8 16       	cp	r14, r24
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	f8 06       	cpc	r15, r24
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	08 07       	cpc	r16, r24
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	18 07       	cpc	r17, r24
    28b0:	88 f4       	brcc	.+34     	; 0x28d4 <__clzsi2+0x40>
    28b2:	8f ef       	ldi	r24, 0xFF	; 255
    28b4:	e8 16       	cp	r14, r24
    28b6:	f1 04       	cpc	r15, r1
    28b8:	01 05       	cpc	r16, r1
    28ba:	11 05       	cpc	r17, r1
    28bc:	31 f0       	breq	.+12     	; 0x28ca <__clzsi2+0x36>
    28be:	28 f0       	brcs	.+10     	; 0x28ca <__clzsi2+0x36>
    28c0:	88 e0       	ldi	r24, 0x08	; 8
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e0       	ldi	r26, 0x00	; 0
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	17 c0       	rjmp	.+46     	; 0x28f8 <__clzsi2+0x64>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	12 c0       	rjmp	.+36     	; 0x28f8 <__clzsi2+0x64>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	e8 16       	cp	r14, r24
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	f8 06       	cpc	r15, r24
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	08 07       	cpc	r16, r24
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	18 07       	cpc	r17, r24
    28e4:	28 f0       	brcs	.+10     	; 0x28f0 <__clzsi2+0x5c>
    28e6:	88 e1       	ldi	r24, 0x18	; 24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <__clzsi2+0x64>
    28f0:	80 e1       	ldi	r24, 0x10	; 16
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	a0 e0       	ldi	r26, 0x00	; 0
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	20 e2       	ldi	r18, 0x20	; 32
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	28 1b       	sub	r18, r24
    2902:	39 0b       	sbc	r19, r25
    2904:	4a 0b       	sbc	r20, r26
    2906:	5b 0b       	sbc	r21, r27
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <__clzsi2+0x7e>
    290a:	16 95       	lsr	r17
    290c:	07 95       	ror	r16
    290e:	f7 94       	ror	r15
    2910:	e7 94       	ror	r14
    2912:	8a 95       	dec	r24
    2914:	d2 f7       	brpl	.-12     	; 0x290a <__clzsi2+0x76>
    2916:	f7 01       	movw	r30, r14
    2918:	ef 5f       	subi	r30, 0xFF	; 255
    291a:	fe 4f       	sbci	r31, 0xFE	; 254
    291c:	80 81       	ld	r24, Z
    291e:	28 1b       	sub	r18, r24
    2920:	31 09       	sbc	r19, r1
    2922:	41 09       	sbc	r20, r1
    2924:	51 09       	sbc	r21, r1
    2926:	c9 01       	movw	r24, r18
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	08 95       	ret

00002932 <__pack_f>:
    2932:	df 92       	push	r13
    2934:	ef 92       	push	r14
    2936:	ff 92       	push	r15
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	fc 01       	movw	r30, r24
    293e:	e4 80       	ldd	r14, Z+4	; 0x04
    2940:	f5 80       	ldd	r15, Z+5	; 0x05
    2942:	06 81       	ldd	r16, Z+6	; 0x06
    2944:	17 81       	ldd	r17, Z+7	; 0x07
    2946:	d1 80       	ldd	r13, Z+1	; 0x01
    2948:	80 81       	ld	r24, Z
    294a:	82 30       	cpi	r24, 0x02	; 2
    294c:	48 f4       	brcc	.+18     	; 0x2960 <__pack_f+0x2e>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e1       	ldi	r26, 0x10	; 16
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e8 2a       	or	r14, r24
    2958:	f9 2a       	or	r15, r25
    295a:	0a 2b       	or	r16, r26
    295c:	1b 2b       	or	r17, r27
    295e:	a5 c0       	rjmp	.+330    	; 0x2aaa <__pack_f+0x178>
    2960:	84 30       	cpi	r24, 0x04	; 4
    2962:	09 f4       	brne	.+2      	; 0x2966 <__pack_f+0x34>
    2964:	9f c0       	rjmp	.+318    	; 0x2aa4 <__pack_f+0x172>
    2966:	82 30       	cpi	r24, 0x02	; 2
    2968:	21 f4       	brne	.+8      	; 0x2972 <__pack_f+0x40>
    296a:	ee 24       	eor	r14, r14
    296c:	ff 24       	eor	r15, r15
    296e:	87 01       	movw	r16, r14
    2970:	05 c0       	rjmp	.+10     	; 0x297c <__pack_f+0x4a>
    2972:	e1 14       	cp	r14, r1
    2974:	f1 04       	cpc	r15, r1
    2976:	01 05       	cpc	r16, r1
    2978:	11 05       	cpc	r17, r1
    297a:	19 f4       	brne	.+6      	; 0x2982 <__pack_f+0x50>
    297c:	e0 e0       	ldi	r30, 0x00	; 0
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	96 c0       	rjmp	.+300    	; 0x2aae <__pack_f+0x17c>
    2982:	62 81       	ldd	r22, Z+2	; 0x02
    2984:	73 81       	ldd	r23, Z+3	; 0x03
    2986:	9f ef       	ldi	r25, 0xFF	; 255
    2988:	62 38       	cpi	r22, 0x82	; 130
    298a:	79 07       	cpc	r23, r25
    298c:	0c f0       	brlt	.+2      	; 0x2990 <__pack_f+0x5e>
    298e:	5b c0       	rjmp	.+182    	; 0x2a46 <__pack_f+0x114>
    2990:	22 e8       	ldi	r18, 0x82	; 130
    2992:	3f ef       	ldi	r19, 0xFF	; 255
    2994:	26 1b       	sub	r18, r22
    2996:	37 0b       	sbc	r19, r23
    2998:	2a 31       	cpi	r18, 0x1A	; 26
    299a:	31 05       	cpc	r19, r1
    299c:	2c f0       	brlt	.+10     	; 0x29a8 <__pack_f+0x76>
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	2a c0       	rjmp	.+84     	; 0x29fc <__pack_f+0xca>
    29a8:	b8 01       	movw	r22, r16
    29aa:	a7 01       	movw	r20, r14
    29ac:	02 2e       	mov	r0, r18
    29ae:	04 c0       	rjmp	.+8      	; 0x29b8 <__pack_f+0x86>
    29b0:	76 95       	lsr	r23
    29b2:	67 95       	ror	r22
    29b4:	57 95       	ror	r21
    29b6:	47 95       	ror	r20
    29b8:	0a 94       	dec	r0
    29ba:	d2 f7       	brpl	.-12     	; 0x29b0 <__pack_f+0x7e>
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <__pack_f+0x9c>
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	aa 1f       	adc	r26, r26
    29cc:	bb 1f       	adc	r27, r27
    29ce:	2a 95       	dec	r18
    29d0:	d2 f7       	brpl	.-12     	; 0x29c6 <__pack_f+0x94>
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	a1 09       	sbc	r26, r1
    29d6:	b1 09       	sbc	r27, r1
    29d8:	8e 21       	and	r24, r14
    29da:	9f 21       	and	r25, r15
    29dc:	a0 23       	and	r26, r16
    29de:	b1 23       	and	r27, r17
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	a1 05       	cpc	r26, r1
    29e4:	b1 05       	cpc	r27, r1
    29e6:	21 f0       	breq	.+8      	; 0x29f0 <__pack_f+0xbe>
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	a0 e0       	ldi	r26, 0x00	; 0
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	9a 01       	movw	r18, r20
    29f2:	ab 01       	movw	r20, r22
    29f4:	28 2b       	or	r18, r24
    29f6:	39 2b       	or	r19, r25
    29f8:	4a 2b       	or	r20, r26
    29fa:	5b 2b       	or	r21, r27
    29fc:	da 01       	movw	r26, r20
    29fe:	c9 01       	movw	r24, r18
    2a00:	8f 77       	andi	r24, 0x7F	; 127
    2a02:	90 70       	andi	r25, 0x00	; 0
    2a04:	a0 70       	andi	r26, 0x00	; 0
    2a06:	b0 70       	andi	r27, 0x00	; 0
    2a08:	80 34       	cpi	r24, 0x40	; 64
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	a1 05       	cpc	r26, r1
    2a0e:	b1 05       	cpc	r27, r1
    2a10:	39 f4       	brne	.+14     	; 0x2a20 <__pack_f+0xee>
    2a12:	27 ff       	sbrs	r18, 7
    2a14:	09 c0       	rjmp	.+18     	; 0x2a28 <__pack_f+0xf6>
    2a16:	20 5c       	subi	r18, 0xC0	; 192
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1e:	04 c0       	rjmp	.+8      	; 0x2a28 <__pack_f+0xf6>
    2a20:	21 5c       	subi	r18, 0xC1	; 193
    2a22:	3f 4f       	sbci	r19, 0xFF	; 255
    2a24:	4f 4f       	sbci	r20, 0xFF	; 255
    2a26:	5f 4f       	sbci	r21, 0xFF	; 255
    2a28:	e0 e0       	ldi	r30, 0x00	; 0
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	20 30       	cpi	r18, 0x00	; 0
    2a2e:	a0 e0       	ldi	r26, 0x00	; 0
    2a30:	3a 07       	cpc	r19, r26
    2a32:	a0 e0       	ldi	r26, 0x00	; 0
    2a34:	4a 07       	cpc	r20, r26
    2a36:	a0 e4       	ldi	r26, 0x40	; 64
    2a38:	5a 07       	cpc	r21, r26
    2a3a:	10 f0       	brcs	.+4      	; 0x2a40 <__pack_f+0x10e>
    2a3c:	e1 e0       	ldi	r30, 0x01	; 1
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	79 01       	movw	r14, r18
    2a42:	8a 01       	movw	r16, r20
    2a44:	27 c0       	rjmp	.+78     	; 0x2a94 <__pack_f+0x162>
    2a46:	60 38       	cpi	r22, 0x80	; 128
    2a48:	71 05       	cpc	r23, r1
    2a4a:	64 f5       	brge	.+88     	; 0x2aa4 <__pack_f+0x172>
    2a4c:	fb 01       	movw	r30, r22
    2a4e:	e1 58       	subi	r30, 0x81	; 129
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	d8 01       	movw	r26, r16
    2a54:	c7 01       	movw	r24, r14
    2a56:	8f 77       	andi	r24, 0x7F	; 127
    2a58:	90 70       	andi	r25, 0x00	; 0
    2a5a:	a0 70       	andi	r26, 0x00	; 0
    2a5c:	b0 70       	andi	r27, 0x00	; 0
    2a5e:	80 34       	cpi	r24, 0x40	; 64
    2a60:	91 05       	cpc	r25, r1
    2a62:	a1 05       	cpc	r26, r1
    2a64:	b1 05       	cpc	r27, r1
    2a66:	39 f4       	brne	.+14     	; 0x2a76 <__pack_f+0x144>
    2a68:	e7 fe       	sbrs	r14, 7
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <__pack_f+0x154>
    2a6c:	80 e4       	ldi	r24, 0x40	; 64
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	a0 e0       	ldi	r26, 0x00	; 0
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	04 c0       	rjmp	.+8      	; 0x2a7e <__pack_f+0x14c>
    2a76:	8f e3       	ldi	r24, 0x3F	; 63
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 e0       	ldi	r26, 0x00	; 0
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e8 0e       	add	r14, r24
    2a80:	f9 1e       	adc	r15, r25
    2a82:	0a 1f       	adc	r16, r26
    2a84:	1b 1f       	adc	r17, r27
    2a86:	17 ff       	sbrs	r17, 7
    2a88:	05 c0       	rjmp	.+10     	; 0x2a94 <__pack_f+0x162>
    2a8a:	16 95       	lsr	r17
    2a8c:	07 95       	ror	r16
    2a8e:	f7 94       	ror	r15
    2a90:	e7 94       	ror	r14
    2a92:	31 96       	adiw	r30, 0x01	; 1
    2a94:	87 e0       	ldi	r24, 0x07	; 7
    2a96:	16 95       	lsr	r17
    2a98:	07 95       	ror	r16
    2a9a:	f7 94       	ror	r15
    2a9c:	e7 94       	ror	r14
    2a9e:	8a 95       	dec	r24
    2aa0:	d1 f7       	brne	.-12     	; 0x2a96 <__pack_f+0x164>
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <__pack_f+0x17c>
    2aa4:	ee 24       	eor	r14, r14
    2aa6:	ff 24       	eor	r15, r15
    2aa8:	87 01       	movw	r16, r14
    2aaa:	ef ef       	ldi	r30, 0xFF	; 255
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	6e 2f       	mov	r22, r30
    2ab0:	67 95       	ror	r22
    2ab2:	66 27       	eor	r22, r22
    2ab4:	67 95       	ror	r22
    2ab6:	90 2f       	mov	r25, r16
    2ab8:	9f 77       	andi	r25, 0x7F	; 127
    2aba:	d7 94       	ror	r13
    2abc:	dd 24       	eor	r13, r13
    2abe:	d7 94       	ror	r13
    2ac0:	8e 2f       	mov	r24, r30
    2ac2:	86 95       	lsr	r24
    2ac4:	49 2f       	mov	r20, r25
    2ac6:	46 2b       	or	r20, r22
    2ac8:	58 2f       	mov	r21, r24
    2aca:	5d 29       	or	r21, r13
    2acc:	b7 01       	movw	r22, r14
    2ace:	ca 01       	movw	r24, r20
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	ff 90       	pop	r15
    2ad6:	ef 90       	pop	r14
    2ad8:	df 90       	pop	r13
    2ada:	08 95       	ret

00002adc <__unpack_f>:
    2adc:	fc 01       	movw	r30, r24
    2ade:	db 01       	movw	r26, r22
    2ae0:	40 81       	ld	r20, Z
    2ae2:	51 81       	ldd	r21, Z+1	; 0x01
    2ae4:	22 81       	ldd	r18, Z+2	; 0x02
    2ae6:	62 2f       	mov	r22, r18
    2ae8:	6f 77       	andi	r22, 0x7F	; 127
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	22 1f       	adc	r18, r18
    2aee:	22 27       	eor	r18, r18
    2af0:	22 1f       	adc	r18, r18
    2af2:	93 81       	ldd	r25, Z+3	; 0x03
    2af4:	89 2f       	mov	r24, r25
    2af6:	88 0f       	add	r24, r24
    2af8:	82 2b       	or	r24, r18
    2afa:	28 2f       	mov	r18, r24
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	99 1f       	adc	r25, r25
    2b00:	99 27       	eor	r25, r25
    2b02:	99 1f       	adc	r25, r25
    2b04:	11 96       	adiw	r26, 0x01	; 1
    2b06:	9c 93       	st	X, r25
    2b08:	11 97       	sbiw	r26, 0x01	; 1
    2b0a:	21 15       	cp	r18, r1
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	a9 f5       	brne	.+106    	; 0x2b7a <__unpack_f+0x9e>
    2b10:	41 15       	cp	r20, r1
    2b12:	51 05       	cpc	r21, r1
    2b14:	61 05       	cpc	r22, r1
    2b16:	71 05       	cpc	r23, r1
    2b18:	11 f4       	brne	.+4      	; 0x2b1e <__unpack_f+0x42>
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	37 c0       	rjmp	.+110    	; 0x2b8c <__unpack_f+0xb0>
    2b1e:	82 e8       	ldi	r24, 0x82	; 130
    2b20:	9f ef       	ldi	r25, 0xFF	; 255
    2b22:	13 96       	adiw	r26, 0x03	; 3
    2b24:	9c 93       	st	X, r25
    2b26:	8e 93       	st	-X, r24
    2b28:	12 97       	sbiw	r26, 0x02	; 2
    2b2a:	9a 01       	movw	r18, r20
    2b2c:	ab 01       	movw	r20, r22
    2b2e:	67 e0       	ldi	r22, 0x07	; 7
    2b30:	22 0f       	add	r18, r18
    2b32:	33 1f       	adc	r19, r19
    2b34:	44 1f       	adc	r20, r20
    2b36:	55 1f       	adc	r21, r21
    2b38:	6a 95       	dec	r22
    2b3a:	d1 f7       	brne	.-12     	; 0x2b30 <__unpack_f+0x54>
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	8c 93       	st	X, r24
    2b40:	0d c0       	rjmp	.+26     	; 0x2b5c <__unpack_f+0x80>
    2b42:	22 0f       	add	r18, r18
    2b44:	33 1f       	adc	r19, r19
    2b46:	44 1f       	adc	r20, r20
    2b48:	55 1f       	adc	r21, r21
    2b4a:	12 96       	adiw	r26, 0x02	; 2
    2b4c:	8d 91       	ld	r24, X+
    2b4e:	9c 91       	ld	r25, X
    2b50:	13 97       	sbiw	r26, 0x03	; 3
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	13 96       	adiw	r26, 0x03	; 3
    2b56:	9c 93       	st	X, r25
    2b58:	8e 93       	st	-X, r24
    2b5a:	12 97       	sbiw	r26, 0x02	; 2
    2b5c:	20 30       	cpi	r18, 0x00	; 0
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	38 07       	cpc	r19, r24
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	48 07       	cpc	r20, r24
    2b66:	80 e4       	ldi	r24, 0x40	; 64
    2b68:	58 07       	cpc	r21, r24
    2b6a:	58 f3       	brcs	.-42     	; 0x2b42 <__unpack_f+0x66>
    2b6c:	14 96       	adiw	r26, 0x04	; 4
    2b6e:	2d 93       	st	X+, r18
    2b70:	3d 93       	st	X+, r19
    2b72:	4d 93       	st	X+, r20
    2b74:	5c 93       	st	X, r21
    2b76:	17 97       	sbiw	r26, 0x07	; 7
    2b78:	08 95       	ret
    2b7a:	2f 3f       	cpi	r18, 0xFF	; 255
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	79 f4       	brne	.+30     	; 0x2b9e <__unpack_f+0xc2>
    2b80:	41 15       	cp	r20, r1
    2b82:	51 05       	cpc	r21, r1
    2b84:	61 05       	cpc	r22, r1
    2b86:	71 05       	cpc	r23, r1
    2b88:	19 f4       	brne	.+6      	; 0x2b90 <__unpack_f+0xb4>
    2b8a:	84 e0       	ldi	r24, 0x04	; 4
    2b8c:	8c 93       	st	X, r24
    2b8e:	08 95       	ret
    2b90:	64 ff       	sbrs	r22, 4
    2b92:	03 c0       	rjmp	.+6      	; 0x2b9a <__unpack_f+0xbe>
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	8c 93       	st	X, r24
    2b98:	12 c0       	rjmp	.+36     	; 0x2bbe <__unpack_f+0xe2>
    2b9a:	1c 92       	st	X, r1
    2b9c:	10 c0       	rjmp	.+32     	; 0x2bbe <__unpack_f+0xe2>
    2b9e:	2f 57       	subi	r18, 0x7F	; 127
    2ba0:	30 40       	sbci	r19, 0x00	; 0
    2ba2:	13 96       	adiw	r26, 0x03	; 3
    2ba4:	3c 93       	st	X, r19
    2ba6:	2e 93       	st	-X, r18
    2ba8:	12 97       	sbiw	r26, 0x02	; 2
    2baa:	83 e0       	ldi	r24, 0x03	; 3
    2bac:	8c 93       	st	X, r24
    2bae:	87 e0       	ldi	r24, 0x07	; 7
    2bb0:	44 0f       	add	r20, r20
    2bb2:	55 1f       	adc	r21, r21
    2bb4:	66 1f       	adc	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	8a 95       	dec	r24
    2bba:	d1 f7       	brne	.-12     	; 0x2bb0 <__unpack_f+0xd4>
    2bbc:	70 64       	ori	r23, 0x40	; 64
    2bbe:	14 96       	adiw	r26, 0x04	; 4
    2bc0:	4d 93       	st	X+, r20
    2bc2:	5d 93       	st	X+, r21
    2bc4:	6d 93       	st	X+, r22
    2bc6:	7c 93       	st	X, r23
    2bc8:	17 97       	sbiw	r26, 0x07	; 7
    2bca:	08 95       	ret

00002bcc <__fpcmp_parts_f>:
    2bcc:	1f 93       	push	r17
    2bce:	dc 01       	movw	r26, r24
    2bd0:	fb 01       	movw	r30, r22
    2bd2:	9c 91       	ld	r25, X
    2bd4:	92 30       	cpi	r25, 0x02	; 2
    2bd6:	08 f4       	brcc	.+2      	; 0x2bda <__fpcmp_parts_f+0xe>
    2bd8:	47 c0       	rjmp	.+142    	; 0x2c68 <__fpcmp_parts_f+0x9c>
    2bda:	80 81       	ld	r24, Z
    2bdc:	82 30       	cpi	r24, 0x02	; 2
    2bde:	08 f4       	brcc	.+2      	; 0x2be2 <__fpcmp_parts_f+0x16>
    2be0:	43 c0       	rjmp	.+134    	; 0x2c68 <__fpcmp_parts_f+0x9c>
    2be2:	94 30       	cpi	r25, 0x04	; 4
    2be4:	51 f4       	brne	.+20     	; 0x2bfa <__fpcmp_parts_f+0x2e>
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	1c 91       	ld	r17, X
    2bea:	84 30       	cpi	r24, 0x04	; 4
    2bec:	99 f5       	brne	.+102    	; 0x2c54 <__fpcmp_parts_f+0x88>
    2bee:	81 81       	ldd	r24, Z+1	; 0x01
    2bf0:	68 2f       	mov	r22, r24
    2bf2:	70 e0       	ldi	r23, 0x00	; 0
    2bf4:	61 1b       	sub	r22, r17
    2bf6:	71 09       	sbc	r23, r1
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <__fpcmp_parts_f+0xac>
    2bfa:	84 30       	cpi	r24, 0x04	; 4
    2bfc:	21 f0       	breq	.+8      	; 0x2c06 <__fpcmp_parts_f+0x3a>
    2bfe:	92 30       	cpi	r25, 0x02	; 2
    2c00:	31 f4       	brne	.+12     	; 0x2c0e <__fpcmp_parts_f+0x42>
    2c02:	82 30       	cpi	r24, 0x02	; 2
    2c04:	b9 f1       	breq	.+110    	; 0x2c74 <__fpcmp_parts_f+0xa8>
    2c06:	81 81       	ldd	r24, Z+1	; 0x01
    2c08:	88 23       	and	r24, r24
    2c0a:	89 f1       	breq	.+98     	; 0x2c6e <__fpcmp_parts_f+0xa2>
    2c0c:	2d c0       	rjmp	.+90     	; 0x2c68 <__fpcmp_parts_f+0x9c>
    2c0e:	11 96       	adiw	r26, 0x01	; 1
    2c10:	1c 91       	ld	r17, X
    2c12:	11 97       	sbiw	r26, 0x01	; 1
    2c14:	82 30       	cpi	r24, 0x02	; 2
    2c16:	f1 f0       	breq	.+60     	; 0x2c54 <__fpcmp_parts_f+0x88>
    2c18:	81 81       	ldd	r24, Z+1	; 0x01
    2c1a:	18 17       	cp	r17, r24
    2c1c:	d9 f4       	brne	.+54     	; 0x2c54 <__fpcmp_parts_f+0x88>
    2c1e:	12 96       	adiw	r26, 0x02	; 2
    2c20:	2d 91       	ld	r18, X+
    2c22:	3c 91       	ld	r19, X
    2c24:	13 97       	sbiw	r26, 0x03	; 3
    2c26:	82 81       	ldd	r24, Z+2	; 0x02
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	82 17       	cp	r24, r18
    2c2c:	93 07       	cpc	r25, r19
    2c2e:	94 f0       	brlt	.+36     	; 0x2c54 <__fpcmp_parts_f+0x88>
    2c30:	28 17       	cp	r18, r24
    2c32:	39 07       	cpc	r19, r25
    2c34:	bc f0       	brlt	.+46     	; 0x2c64 <__fpcmp_parts_f+0x98>
    2c36:	14 96       	adiw	r26, 0x04	; 4
    2c38:	8d 91       	ld	r24, X+
    2c3a:	9d 91       	ld	r25, X+
    2c3c:	0d 90       	ld	r0, X+
    2c3e:	bc 91       	ld	r27, X
    2c40:	a0 2d       	mov	r26, r0
    2c42:	24 81       	ldd	r18, Z+4	; 0x04
    2c44:	35 81       	ldd	r19, Z+5	; 0x05
    2c46:	46 81       	ldd	r20, Z+6	; 0x06
    2c48:	57 81       	ldd	r21, Z+7	; 0x07
    2c4a:	28 17       	cp	r18, r24
    2c4c:	39 07       	cpc	r19, r25
    2c4e:	4a 07       	cpc	r20, r26
    2c50:	5b 07       	cpc	r21, r27
    2c52:	18 f4       	brcc	.+6      	; 0x2c5a <__fpcmp_parts_f+0x8e>
    2c54:	11 23       	and	r17, r17
    2c56:	41 f0       	breq	.+16     	; 0x2c68 <__fpcmp_parts_f+0x9c>
    2c58:	0a c0       	rjmp	.+20     	; 0x2c6e <__fpcmp_parts_f+0xa2>
    2c5a:	82 17       	cp	r24, r18
    2c5c:	93 07       	cpc	r25, r19
    2c5e:	a4 07       	cpc	r26, r20
    2c60:	b5 07       	cpc	r27, r21
    2c62:	40 f4       	brcc	.+16     	; 0x2c74 <__fpcmp_parts_f+0xa8>
    2c64:	11 23       	and	r17, r17
    2c66:	19 f0       	breq	.+6      	; 0x2c6e <__fpcmp_parts_f+0xa2>
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <__fpcmp_parts_f+0xac>
    2c6e:	6f ef       	ldi	r22, 0xFF	; 255
    2c70:	7f ef       	ldi	r23, 0xFF	; 255
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <__fpcmp_parts_f+0xac>
    2c74:	60 e0       	ldi	r22, 0x00	; 0
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	cb 01       	movw	r24, r22
    2c7a:	1f 91       	pop	r17
    2c7c:	08 95       	ret

00002c7e <__prologue_saves__>:
    2c7e:	2f 92       	push	r2
    2c80:	3f 92       	push	r3
    2c82:	4f 92       	push	r4
    2c84:	5f 92       	push	r5
    2c86:	6f 92       	push	r6
    2c88:	7f 92       	push	r7
    2c8a:	8f 92       	push	r8
    2c8c:	9f 92       	push	r9
    2c8e:	af 92       	push	r10
    2c90:	bf 92       	push	r11
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	ca 1b       	sub	r28, r26
    2ca8:	db 0b       	sbc	r29, r27
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	09 94       	ijmp

00002cb6 <__epilogue_restores__>:
    2cb6:	2a 88       	ldd	r2, Y+18	; 0x12
    2cb8:	39 88       	ldd	r3, Y+17	; 0x11
    2cba:	48 88       	ldd	r4, Y+16	; 0x10
    2cbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cc8:	b9 84       	ldd	r11, Y+9	; 0x09
    2cca:	c8 84       	ldd	r12, Y+8	; 0x08
    2ccc:	df 80       	ldd	r13, Y+7	; 0x07
    2cce:	ee 80       	ldd	r14, Y+6	; 0x06
    2cd0:	fd 80       	ldd	r15, Y+5	; 0x05
    2cd2:	0c 81       	ldd	r16, Y+4	; 0x04
    2cd4:	1b 81       	ldd	r17, Y+3	; 0x03
    2cd6:	aa 81       	ldd	r26, Y+2	; 0x02
    2cd8:	b9 81       	ldd	r27, Y+1	; 0x01
    2cda:	ce 0f       	add	r28, r30
    2cdc:	d1 1d       	adc	r29, r1
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	ed 01       	movw	r28, r26
    2cea:	08 95       	ret

00002cec <_exit>:
    2cec:	f8 94       	cli

00002cee <__stop_program>:
    2cee:	ff cf       	rjmp	.-2      	; 0x2cee <__stop_program>
